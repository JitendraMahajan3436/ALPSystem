@model IEnumerable<REIN_MES_System.Models.MM_MT_Conditional_Based_Maintenance>
@using REIN_MES_System.Models;
@{
    ViewBag.Title = "ShowMachineCBM";
    Layout = "~/Views/Shared/WithoutSideBarNoMenu/_Layout.cshtml";
    var globalData = (REIN_MES_System.Models.GlobalData)ViewData["GlobalDataModel"];
    REIN_SOLUTION_MEntities db = new REIN_SOLUTION_MEntities();
    var machineID = 0;
}

@*<script src="~/Content/theme/plugins/JQueryGraph/jquery-ui.min.js"></script>
    <script src="~/Content/theme/plugins/JQueryGraph/jquery.min.js"></script>

    <link href="~/Content/theme/plugins/JQueryGraph/jquery-ui.css" rel="stylesheet" />
    <link href="~/Content/theme/plugins/JQueryGraph/Jquery-dynameter.css" rel="stylesheet" />
    <script src="~/Content/theme/plugins/JQueryGraph/jquery.dynameter.js"></script>
    <script src="~/Content/theme/plugins/JQueryGraph/jquery.tempgauge.js"></script>*@

<style>
    .modal-dialog {
        width: 80%;
        height: 100%;
        margin-left: 10%;
        overflow-y: auto;
    }

    .modal-header {
        margin-top: 0%;
        background-color: brown;
    }

    .modal-open .modal {
        overflow-x: hidden;
        overflow-y: hidden;
    }
</style>
<div class="row" id="ClitaDailyCheckContainer">
    <div class="col-md-12 col-sm-12 col-lg-12  cbm-parent-container">
        @{ if (globalData != null)
            {
                if (globalData.isErrorMessage == true || globalData.isSuccessMessage == true || globalData.isAlertMessage == true)
                {
                    <div class="box-body">
                        @{
                            if (globalData != null)
                            {
                                <div class="alert @{ if (globalData.isErrorMessage == true) { <text>alert-danger</text>}
                                                 else if (globalData.isSuccessMessage == true){ <text>alert-info</text>}
                                                 else if (globalData.isAlertMessage == true){<text>alert-warning</text>} } alert-dismissable" @{ if ((globalData.isErrorMessage == true) || (globalData.isSuccessMessage == true) || (globalData.isAlertMessage == true)) { <text> style="display:block;" </text>  } else { <text> style="display:none;" </text>  } }>
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                                    <h4>
                                        <i class="icon fa @{ if (globalData.isErrorMessage == true) { <text>fa-ban</text>}
                                                 else if (globalData.isSuccessMessage == true){ <text>fa-check</text>}
                                                 else if (globalData.isAlertMessage == true){<text>fa-warning</text>} }"></i> @globalData.messageTitle
                                            </h4>
                                            @globalData.messageDetail
                                        </div>
                                    }
                        }
                    </div>
                }
            }
        }
        <div class="nav-tabs-custom">
            <!-- Tabs within a box -->

            <ul class="nav nav-tabs" style="position:fixed;z-index:1000;background-color:white;width:100%;margin-top:-1%">
                @if (ViewBag.MachineList != null)
                {
                    int i = 0;
                    foreach (var machineObj in ViewBag.MachineList)
                    {
                        machineID = Convert.ToInt32(machineObj.Machine_ID);
                        i++;
                        if (i == 1)
                        {
                            <li id="machinetab" class="active"><a href="#machine_@machineObj.Machine_ID" class="machine-tab graph-initialised" data-target-tab="machine_@machineObj.Machine_ID" data-toggle="tab" data-machineid="@machineObj.Machine_ID">@machineObj.Machine_Name</a></li>

                        }
                        else
                        {
                            <li><a href="#machine_@machineObj.Machine_ID" class="machine-tab" data-target-tab="machine_@machineObj.Machine_ID" data-toggle="tab" data-machineid="@machineObj.Machine_ID">@machineObj.Machine_Name</a></li>
                        }
                        @*<li style="width:60%"><span id="ConfigStatus" style="font-size:20px;color:red;font-weight:bold"></span></li>*@
                        <li id="Analytics" style="display:none;"><a href="#machine_@machineID" class="machine-tab graph-initialised" data-target-tab="machine_@machineID" data-toggle="tab" data-machineid="@machineID">Analytics</a></li>
                        <li id="Prediction" style="display:none;"><a href="#machine_@machineID" class="machine-tab graph-initialised" data-target-tab="machine_@machineID" data-toggle="tab" data-machineid="@machineID">Prediction</a></li>
                        <li><span id="ConfigStatus" style="font-size:20px;color:red;font-weight:bold;background-color:gray"></span></li>
                        <li style="width:25%;margin-left:75%;float:right;position:fixed;margin-top:0.8%"><span style="font-size:18px;font-weight:bold">Machine Live Status : </span><span id="result_@machineObj.Machine_ID" style="width:30%;text-align:center;border: 1px solid black; color:black; padding: 3px;border-radius: 48px;float:right;margin-right:10%"><span id="spanStatus"></span></span><label id="PLCStatus" style="color:red;font-size:11px;"></label></li>

                        @*<li style="width:21%;margin-left:70%;float:right;position:fixed"><button class="btn btn-primary" data-target="#CBMData" data-toggle="modal" data-id="@machineObj.Machine_ID" onclick="GetCBMData(@machineObj.Machine_ID)">View Analytics</button></li>*@
                    }
                }

                @*<li style="float:right"></li>*@
                @*<li style="width:15%;float:right"><span style="font-size:18px;font-weight:bold">Connection :  </span><span id="spanConnection" style="width:25%;text-align:center;border: 1px solid black; color:white; padding: 3px;border-radius: 48px;float:right;margin-right:13%"><span id="spanConnectionStatus"></span></span><label id="PLCStatus" style="color:red;font-size:11px;"></label></li>*@
            </ul>

            <div class="tab-content" id="machine">
                @if (ViewBag.MachineList != null)
                {
                    int i = 0;
                    foreach (var machineObj in ViewBag.MachineList)
                    {
                        i++;

                        <div class='tab-pane @((i == 1)? "active": "")' id="machine_@machineObj.Machine_ID" style="position: relative;margin-top:3%">
                            <div class="row cbm-container">
                                @{ int j = 0; }
                                @foreach (var item in Model.Where(a => a.Machine_ID == machineObj.Machine_ID))
                                {
                                    j++;
                                    <div class="col-md-4 col-sm-4 col-lg-4">
                                        <div class="box box-primary box-solid cbm-box" id="cbm_@(item.CBM_ID)_box" style="height:430px">
                                            <div class="box-header with-border">
                                                <h3 class="box-title">@item.Machine_Parameter (Unit - @item.UOM)</h3>
                                                <div class="box-tools pull-right">
                                                    @*<button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                                                        <button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>*@
                                                </div>
                                            </div><!-- /.box-header -->
                                            <div class="box-body">
                                                <div class="row">
                                                    <div class="col-md-12 col-sm-12 col-lg-12">
                                                        <div class="chart-responsive" style="text-align:center">
                                                            @if (item.Parameter_Category == "Level" || item.Parameter_Category == "LEVEL")
                                                            {
                                                                <div class="col-md-12 col-sm- col-lg-12">
                                                                    <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                        <svg id="cbm_@item.CBM_ID" style="width:200px;height:225px" class="levelclass"></svg>

                                                                    </a>
                                                                </div>
                                                            }

                                                            else
                                                            {
                                                                if (item.Parameter_Category == "Temperature")
                                                                {
                                                                    //********************** start code 1
                                                                    if (item.Image_ID == 5)
                                                                    {
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">
                                                                            <div class="tempdiv">
                                                                                <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                                    <canvas id="cbm_@item.CBM_ID" width="230" height="226" style="top:0px;">
                                                                                        [No canvas support]
                                                                                    </canvas>
                                                                                    <div id="cc">

                                                                                    </div>
                                                                                </a>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                    }
                                                                    //********************** end code 1

                                                                    //**********************start code 2
                                                                    if (item.Image_ID == 6)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" width="230" height="224" style="top:-12px; " class="center temp2class">
                                                                                [No canvas support]
                                                                            </canvas>
                                                                        </a>
                                                                    }
                                                                    //********************** End code 2

                                                                    //********************** start code 3
                                                                    if (item.Image_ID == 7)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //*********************** end code 3
                                                                }
                                                                else if (item.Parameter_Category == "Voltage")
                                                                {

                                                                    //************************** start code 1
                                                                    if (item.Image_ID == 15)
                                                                    {
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                            <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                                <div id="@("vchart" + item.CBM_ID)" style="width:230px;height:226px;margin-left:-80%" class="sguage">

                                                                                </div>
                                                                            </a>

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                    }
                                                                    //************************** end code 1

                                                                    //**************************start code 2
                                                                    if (item.Image_ID == 16)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" width="230" height="224" style="top:-12px; " class="center">
                                                                                [No canvas support]
                                                                            </canvas>

                                                                        </a>
                                                                    }
                                                                    //***************************** End code 2

                                                                    //***************************** start code 3
                                                                    if (item.Image_ID == 17)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" width="230" height="226" style="top:-12px;height:226px;" class="center">

                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //***************************** end code 3

                                                                    //**************************** start code 4
                                                                    if (item.Image_ID == 18)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //*************************** end code 4
                                                                }
                                                                else if (item.Parameter_Category == "Current")
                                                                {
                                                                    //*************************** start code 1
                                                                    if (item.Image_ID == 11)
                                                                    {
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                            <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                                <div id="@("vchart" + item.CBM_ID)" style="width:230px;height:226px;margin-left:-80%" class="sguage">

                                                                                </div>
                                                                            </a>

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                    }
                                                                    //*************************** end code 1

                                                                    //****************************start code 2
                                                                    if (item.Image_ID == 12)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" width="230" height="224" style="top:-12px; " class="center">
                                                                                [No canvas support]
                                                                            </canvas>

                                                                        </a>
                                                                    }
                                                                    //***************************** End code 2

                                                                    //**************************** start code 3
                                                                    if (item.Image_ID == 13)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" width="230" height="250" style="top:-12px;height:226px;" class="center">

                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //**************************** end code 3

                                                                    //****************************** start code 4
                                                                    if (item.Image_ID == 14)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //****************************** end code 4
                                                                }
                                                                else if (item.Parameter_Category == "Pressure")
                                                                {
                                                                    //*********************** start code 1
                                                                    if (item.Image_ID == 1)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" height="225" style="top:-12px;width:230px" class="center presure1">
                                                                                [No canvas support]
                                                                            </canvas>

                                                                        </a>
                                                                    }
                                                                    //************************ end code 1

                                                                    //************************Start code 2
                                                                    if (item.Image_ID == 2)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" width="230" height="224" style="top:-12px; " class="center">
                                                                                [No canvas support]
                                                                            </canvas>

                                                                        </a>
                                                                    }
                                                                    //************************ End code 2

                                                                    //************************* start code 3
                                                                    if (item.Image_ID == 3)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" width="230" height="250" style="top:-12px;height:226px;" class="center">

                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //************************* end code 3

                                                                    //************************* start code 4
                                                                    if (item.Image_ID == 4)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //************************ end code 4
                                                                }
                                                                else if (item.Parameter_Category == "Vibration")
                                                                {
                                                                    //************************ Start code 1
                                                                    if (item.Image_ID == 8)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">
                                                                            <canvas id="cbm_@item.CBM_ID" width="230" height="226" style="top:-12px; " class="center">
                                                                                [No canvas support]
                                                                            </canvas>

                                                                        </a>
                                                                    }
                                                                    //************************ End code 1

                                                                    //************************ start code 2
                                                                    if (item.Image_ID == 9)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    //************************ end code 2
                                                                }
                                                                else if (item.Parameter_Category == "Distance")
                                                                {
                                                                    //if (item.Image_ID == 2)
                                                                    //{
                                                                    <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                        <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                            <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                            <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                        </div>
                                                                    </a>


                                                                    //}

                                                                    @*<a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">


                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:22px;margin-left:8%;margin-top:25%;margin-bottom:30%;" class="progress text-center">
                                                                                <span></span>
                                                                                <div id="prg_@item.CBM_ID" class="progress-bar eqp-remlife-perc text-center bg-light-yellow">

                                                                                </div>

                                                                            </div>

                                                                        </a>*@
                                                                }
                                                                else if (item.Parameter_Category == "Flow")
                                                                {
                                                                    //if (item.Image_ID == 2)
                                                                    //{
                                                                    <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                        <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                            <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                            <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                        </div>
                                                                    </a>
                                                                    //}
                                                                }
                                                                else if (item.Parameter_Category == "Torque")
                                                                {
                                                                    if (item.Image_ID == 23)
                                                                    {
                                                                        <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                            <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                                <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                                <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                            <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                                <div id="@("vchart" + item.CBM_ID)" style="width:230px;height:226px;margin-left:-80%" class="sguage">

                                                                                </div>
                                                                            </a>

                                                                        </div>
                                                                        <div class="col-md-4 col-sm-4 col-lg-4">

                                                                        </div>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <a data-target="#CBM_ID" data-toggle="modal" data-id="@item.CBM_ID" onclick="MyFunction2(@item.CBM_ID)">

                                                                        <div id="cbm_@item.CBM_ID" style="top:1%;width:84%;height:185px;margin-left:8%;margin-top:6%;margin-bottom:6%;border:1px solid gray" class="center tableclass">
                                                                            <label id="lblCurrentValue_@item.CBM_ID" class="categoryLabel"></label>
                                                                            <span id="span_@item.CBM_ID" class="categorySpan"></span>
                                                                        </div>
                                                                    </a>
                                                                }
                                                            }
                                                        </div><!-- ./chart-responsive -->
                                                    </div><!-- /.col -->




                                                </div><!-- /.row -->
                                            </div><!-- /.box-body -->
                                            <div class="box-footer" style="width:98% !important;margin-left:1%">
                                                <div class="col-md-12  col-sm-12 col-lg-12" style="text-align:center">
                                                    <table class="table table-bordered table-condensed table-responsive table-hover tableValue">
                                                        <thead>
                                                            <tr>
                                                                <th style="text-align:center">
                                                                    Act Val
                                                                </th>
                                                                <th colspan="2" style="text-align:center">
                                                                    Operating Range
                                                                </th>
                                                                @*<th style="text-align:center">Max Val</th>*@
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                @if (item.Is_Conversion_Factor == 2)
                                                                {
                                                                    if (item.Current_Value == "")
                                                                    {
                                                                        <td class="bg-green-gradient cbm-current-val text-bold" id="cbm-current-val" style="font-family:initial">
                                                                            @( String.Format("{0:0.00}", 0)))
                                                                        </td>
                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="bg-green-gradient cbm-current-val text-bold" id="cbm-current-val" style="font-family:initial">
                                                                            @( String.Format("{0:0.00}", item.Current_Value != "" ? (Convert.ToDecimal(item.Current_Value) * item.Scale_Denominator) : 0))
                                                                        </td>
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    if (item.Current_Value == "")
                                                                    {
                                                                        <td class="bg-green-gradient cbm-current-val text-bold" id="cbm-current-val" style="font-family:initial">
                                                                            @( String.Format("{0:0.00}", 0))
                                                                        </td>
                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="bg-green-gradient cbm-current-val text-bold" id="cbm-current-val" style="font-family:initial">
                                                                            @( String.Format("{0:0.00}", item.Current_Value != "" ? (Convert.ToDecimal(item.Current_Value) / item.Scale_Denominator) : 0))
                                                                        </td>
                                                                    }

                                                                }

                                                                <td class="bg-teal-gradient cbm-min-val text-bold" style="font-family:initial;font-size:larger">
                                                                    Min -   @( String.Format("{0:0.00}", item.Green_Min_Val))
                                                                </td>
                                                                <td class="bg-teal-gradient cbm-max-val text-bold" style="font-family:initial;font-size:larger">
                                                                    Max -   @( String.Format("{0:0.00}", item.Green_Max_Val))
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <label id="TagInvalid_@item.CBM_ID" class="blinker1" style="font-size:17px;color:red">@item.Tag_Remark</label>

                                                </div>


                                            </div><!-- /.footer -->

                                        </div>
                                    </div>

                                }
                            </div>

                        </div>
                    }
                }
            </div>

            <div class="tab-content" id="analyze">
                @if (ViewBag.MachineList != null)
                {
                    int i = 0;

                    <div class="row" style="margin-top:4%">
                        <div class="col-md-2">
                            @Html.Label("From Date", new { @class = "slabel" })
                            <input type="text" id="FromDateCBMAnalytics" name="FromDate" class="form-control" />
                        </div>
                        <div class="col-md-2">
                            @Html.Label("To Date", new { @class = "slabel" })
                            <input type="text" id="ToDateCBMAnalytics" class="form-control" />
                        </div>
                        <div class="col-md-2">
                            @Html.Label("BtnLabel", new { @style = "display:none" })
                            <input type="button" id="BtnGenerateCBMAnalytics" class="btn btn-primary smModalGen" value="View Trend" />
                        </div>
                    </div>
                    foreach (var machineObj in ViewBag.MachineList)
                    {
                        i++;

                        <div class='tab-pane @((i == 1)? "active": "")' id="machine_@machineObj.Machine_ID" style="position: relative;margin-top:3%">
                            <div class="row cbm-container">
                                @{ int j = 0; }
                                @foreach (var item in Model.Where(a => a.Machine_ID == machineObj.Machine_ID && a.Is_Analytics == true))
                                {
                                    j++;
                                    var statusID = @machineObj.Machine_ID + "_" + @j;
                                    <div class="col-md-4 col-sm-4 col-lg-4">
                                        <div class="box box-primary box-solid cbm-box" id="cbm_@(item.CBM_ID)_box" style="height:470px">
                                            <div class="box-header with-border">
                                                <h3 class="box-title">@item.Machine_Parameter (Unit - @item.UOM)</h3>
                                                <div class="box-tools pull-right">
                                                    @*<button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                                                        <button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>*@
                                                </div>
                                            </div><!-- /.box-header -->
                                            <span id="CbmStatus_@(item.CBM_ID)" data-toggle="tooltip" title="CBM Parameter Health" style="border: 1px solid black;width:18%; padding-left: 2%;padding-right:2%;font-size:80%;border-radius:10px;float:right;margin-right:1%;padding-top:2%;padding-bottom:2%;text-align:center"><span style="text-align:center" id="spanStatus_@(item.CBM_ID)"></span></span>
                                            <div id="cbmData_@(item.CBM_ID)" style="width:95% !important;height:390px;margin-left:1%">
                                                <div id="CBMAnalyticsDetails_@statusID" value="" style="width:30px !important;text-align:center">

                                                </div>
                                            </div>

                                        </div>

                                    </div>

                                }

                            </div>

                        </div>

                    }
                }
            </div>
            <div class="tab-content" id="SubPredictedtab">

                <div class="nav-tabs-custom" style="margin-top: 3%" id="customPredicted">
                    <ul class="nav nav-tabs">
                        @if (ViewBag.CBMGroupList != null)
                        {
                            int i = 0;
                            foreach (var groupObj in ViewBag.CBMGroupList)
                            {
                                i++;
                                if (i == 1)
                                {
                                    <li class="active" id="Tab_@i" value="@groupObj.CBM_Group_ID" onclick="ShowReport(@groupObj.CBM_Group_ID)"><a href="#group_@groupObj.CBM_Group_ID" class="machine-tab graph-initialised" data-target-tab="group_@groupObj.CBM_Group_ID" value="@groupObj.CBM_Group_ID" data-toggle="tab" data-machineid="@groupObj.Machine_ID">@groupObj.Group_Name</a></li>
                                }
                                else
                                {
                                    <li id="Tab_@i" value="@groupObj.CBM_Group_ID" onclick="ShowReport(@groupObj.CBM_Group_ID)"><a href="#group_@groupObj.CBM_Group_ID" value="@groupObj.CBM_Group_ID" class="machine-tab" data-target-tab="group_@groupObj.CBM_Group_ID" data-toggle="tab" data-machineid="@groupObj.Machine_ID">@groupObj.Group_Name</a></li>
                                }




                            }
                        }
                        @*<li style="float:right"><button class="btn btn-primary" id="startBtn">Start</button></li>
                            <li style="float:right"><button class="btn btn-primary" id="stopBtn">Stop</button></li>*@

                    </ul>

                    <div class="row" style="margin-left: 6px;margin-top:2%">
                        <input type="hidden" id="hdnCBMId" value="" />
                        <div class="col-md-3 col-lg-3 col-sm-3" id="divFromDate" style="margin-left:-1%;margin-right:-3%">
                            <div class="col-md-5">
                                @Html.Label("From Date", new { @class = "slabel" })
                            </div>
                            <div class="col-md-7">
                                @*<input type="text" id="fromdatedatepicker_@group.CBM_Group_ID" class="fromdate1 form-control" />*@
                                <input type="text" id="fromdateprediction" class="fromdate1 form-control" />
                            </div>


                        </div>
                        <div class="col-md-3" id="divFromDate">
                            <div class="col-md-4">
                                @Html.Label("To Date", new { @class = "slabel" })
                            </div>
                            <div class="col-md-8">
                                @*<input type="text" id="todatedatepicker_@group.CBM_Group_ID" class="todate1 form-control" />*@
                                <input type="text" id="todateprediction" class="todate1 form-control" />
                            </div>


                        </div>
                        <div class="col-md-3">
                            <input type="button" id="btnPredicted" class="btn btn-primary smModalGen" onclick="GetReport()" value="Submit" style="margin-top:0px" />
                            @*<input type="button" id="BtnGenerateExcel" class="btn btn-primary smModalGen" value="ExportReport" />*@
                        </div>

                    </div>

                    <div class="tab-content" id="Predictedtab">
                        @if (ViewBag.CBMGroupList != null)
                        {
                            int i = 0;
                            int groupID = 0;
                            int j = 0;
                            foreach (var group in ViewBag.CBMGroupList)
                            {
                                i++;
                                var groupId = group.CBM_Group_ID;
                                groupID = Convert.ToInt32(group.CBM_Group_ID);
                                var cbmIds = db.MM_CBM_Group_Mapping.Where(m => m.CBM_Group_ID == groupID).Select(m => m.CBM_ID).ToList();
                                <div class='tab-pane @((i == 1)? "active": "")' id="group_@i" style="position: relative;">

                                    <div class="row cbm-container">
                                        <div class="col-md-12 col-lg-12 col-sm-12" id="CBMGraph" style="padding:0px">



                                            <div class="col-md-11 col-lg-11 col-sm-11" id="container_@group.CBM_Group_ID" value="">
                                            </div>
                                            <div class="col-md-11 col-lg-11 col-sm-11" id="container1_@group.CBM_Group_ID" value="">
                                            </div>
                                            <div class="col-md-11 col-lg-11 col-sm-11" id="container2_@group.CBM_Group_ID" value="">
                                            </div>
                                            <div id="loading__@group.CBM_Group_ID" class="highcharts-loadinstyle" style="display:none">
                                                <div class="center-block">
                                                    @*<img src="/content/images/Loader/loading_spinner.gif" style="height:100px;margin: 0 0 0 40%;">*@
                                                    @*<img src="~/Content/Loader/loading_spinner.gif" style="height:100px;margin: 0 0 0 40%" />*@
                                                    <img src="~/Content/loading_spinner.gif" style="height:200px;margin: 0 0 0 40%" />
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            @*<script src="~/Scripts/PDFHighchart/exporting.js"></script>*@
            <link href="~/Content/theme/plugins/datepicker/datepicker3.css" rel="stylesheet" />
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="modal fade" id="CBM_ID" tabindex="-1" role="basic" aria-hidden="true" style="display: none;width:100%;height:100%;position:center">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button data-dismiss="modal" type="button" class="close">Close</button>
                                @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
                                <h4 class="modal-title classModalTitle">CBM Data - @ViewBag.MachineName</h4>
                            </div>
                            <div class="modal-body">

                                <div class="row">
                                    <input type="hidden" id="hdnCBMId" value="" />
                                    <div class="col-md-3" id="divFromDate">
                                        @Html.Label("From Date", new { @class = "slabel" })
                                        <input type="text" id="FromDate" name="FromDate" class="form-control" />
                                    </div>
                                    <div class="col-md-3" id="divToDate">
                                        @Html.Label("To Date", new { @class = "slabel" })
                                        <input type="text" id="ToDate" class="form-control" />
                                    </div>
                                    <div class="col-md-2" style="display:none">
                                        @Html.Label("History Data", new { @class = "slabel" })
                                        <select id="Hdata" class="form-control">
                                            <option id="Hdata" value="AllData">All Data</option>
                                            <option id="Hdata" value="ExceptionalData">Exceptions</option>
                                        </select>
                                    </div>

                                    <div class="col-md-4">
                                        @Html.Label("To Date", new { @style = "display:none" })
                                        <input type="button" id="BtnGenerate" class="btn btn-primary smModalGen" value="View Trend" />
                                        <input type="button" id="BtnGenerateExcel" class="btn btn-primary smModalGen" value="ExportReport" />
                                    </div>

                                </div>






                                <div id="CBMDashboardDetails" value="">

                                </div>

                                <div id="ccCharat" value="">

                                </div>
                                @*<div id="notificationLog" class="notification">
                                        <strong></strong>
                                    </div>*@
                            </div>
                            @*<div class="modal-footer">
                                    <button data-dismiss="modal" type="button" class="btn btn-primary smModalGen">Close</button>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="modal fade" id="CBMData" tabindex="-1" role="basic" aria-hidden="true" style="display: none;width:100%;height:100%;position:center">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button data-dismiss="modal" type="button" class="close">Close</button>
                                @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
                                <h4 class="modal-title classModalTitle">CBM Data - @ViewBag.MachineName</h4>
                            </div>
                            <div class="modal-body">

                                <div class="row">
                                    <input type="hidden" id="hdnCBMId" value="" />
                                    <div class="col-md-2" id="divFromDate">
                                        @Html.Label("From Date", new { @class = "slabel" })
                                        <input type="text" id="FromDateCBM" name="FromDate" class="form-control" />
                                    </div>
                                    <div class="col-md-2" id="divToDate">
                                        @Html.Label("To Date", new { @class = "slabel" })
                                        <input type="text" id="ToDateCBM" class="form-control" />
                                    </div>
                                    <div class="col-md-6 col-lg-6 col-sm-6">
                                        @Html.Label("Parameter")
                                        <select id="CBMParameter" class="form-control"></select>

                                    </div>
                                    <div class="col-md-2">
                                        @Html.Label("BtnLabel", new { @style = "display:none" })
                                        <input type="button" id="BtnGenerateCBM" class="btn btn-primary smModalGen" value="View Trend" />
                                    </div>

                                </div>






                                <div id="CBMAnalyticsDetails" value="">

                                </div>

                                <div id="CBMAnalytics" value="">

                                </div>
                                @*<div id="notificationLog" class="notification">
                                        <strong></strong>
                                    </div>*@
                            </div>
                            @*<div class="modal-footer">
                                    <button data-dismiss="modal" type="button" class="btn btn-primary smModalGen">Close</button>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
            <div id="fuel-gauge"></div>

        </div><!-- /.nav-tabs-custom -->
    </div>
</div>
<style>
    .bg-faulty {
        background: #ff2d27;
    }
</style>


@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/fdtheme/MMTUCharts_js")
@*@Scripts.Render("~/bundles/highcharts")*@
@*@Scripts.Render("~/bundles/datepicker")*@
@Scripts.Render("~/bundles/PDFHighchart")

<script src="~/Scripts/CanvasGuage.js"></script>
<script src="~/Scripts/solid-gauge.js"></script>
<script src="~/Scripts/moment.min.js"></script>
<script src="~/Content/theme/plugins/DateTimePicker/jquery.datetimepicker.min.js"></script>
<script src="~/Content/theme/plugins/DateTimePicker/jquery.datetimepicker.full.min.js"></script>
<link href="~/Content/theme/plugins/DateTimePicker/jquery.datetimepicker.min.css" rel="stylesheet" />
@*@Styles.Render("~/Content/datepickercss")*@
<script type="text/javascript">



    var repeater;
    var cbmParams = {};
    var flowNumArr = {};

    $(".fromdate1").datetimepicker(
        {

            format: 'Y/m/d H:i:s',

            autoclose: true,
            onSelect: function (selected) {
                var dt = new Date(selected);
                dt.setDate(dt.getDate() + 1)

                $(".todate1").datetimepicker("option", "minDate", dt)
            }
            //fromdate
        });

    $(".todate1").datetimepicker(
        {
            format: 'Y/m/d H:i:s',

            autoclose: true,
            onSelect: function (selected) {
                var dt1 = new Date(selected);
                dt1.setDate(dt1.getDate() - 1)
                $(".fromdate1").datetimepicker("option", "maxDate", dt1)
            }
            //fromdate
        });



    $("#FromDateCBMAnalytics").datetimepicker(
        {
            format: 'd/m/y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });


    $("#ToDateCBMAnalytics").datetimepicker(
        {
            format: 'd/m/Y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });

    $("#FromDateCBM").datetimepicker(
        {
            format: 'd/m/y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });
    $("#ToDateCBM").datetimepicker(
        {
            format: 'd/m/Y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });

    $("#FromDate").datetimepicker(
        {
            format: 'd/m/y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });
    $("#ToDate").datetimepicker(
        {
            format: 'd/m/Y H:i',
            defaultDate: new Date(),
            timepickerScrollbar: true,
            hours12: false
        });


    $("#Analytics").click(function () {
        $("#analyze").show();
        $("#machine").hide();
        $("#SubPredictedtab").hide();



        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        debugger;
        for (var j = 1; j <= @ViewBag.CBMCount; j++) {
            $("#CBMAnalyticsDetails_" + machineID + "_" + j).html("<img class=loading-img1 height='150px' style='position=Absolute;text-align=center' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        }

        ShowParameterHealth(machineID);
        var date1 = new Date();
        var toDate = new Date();
        toDate = moment(toDate).format("DD/MM/YY HH:mm");
        var fromDate = new Date(date1.getTime() - 10 * 60000);
        fromDate = moment(fromDate).format("DD/MM/YY HH:mm");
        $('#FromDateCBMAnalytics').val(fromDate);
        $('#ToDateCBMAnalytics').val(toDate);
        setInterval(GetCBMAnalyticsData(machineID, fromDate, toDate), 2000);
    })
    $("#Prediction").click(function () {
        debugger;
        $("#analyze").hide();
        $("#machine").hide();
        $("#SubPredictedtab").show();
        var date1 = new Date();
        var toDate = new Date();
        toDate = moment(toDate).format("DD/MM/YY HH:mm:ss");
        var fromDate = new Date(date1.getTime() - 10 * 60000);
        fromDate = moment(fromDate).format("DD/MM/YY HH:mm:ss");
        //$("#fromdatedatepicker" + data.List[i].CBM_Group_ID).val(strDate);
        //$("#todatedatepicker" + data.List[i].CBM_Group_ID).val(endDate);
        //$('#fromdatedatepicker').val(fromDate);
        //$('#fromdatedatepicker').val(toDate);

        $('#fromdateprediction').val(fromDate);
        $('#todateprediction').val(toDate);
        var activeGroupID = $("#Tab_1").val();
        ShowReport(activeGroupID);
    })


    $("#machinetab").click(function () {
        $("#analyze").hide();
        $("#machine").show();
        $("#SubPredictedtab").hide();
    })



    $("#BtnGenerateCBM").click(function () {
        $('#CBMAnalytics').html();
        $('#CBMAnalytics').empty();
        var fromDate = $('#FromDateCBM').val();
        var toDate = $("#ToDateCBM").val();
        var CBMId = $('#CBMParameter').val();

        var xAxisLabel = 'Time';
        $("#CBMAnalyticsDetails").html("<img class=loading-img1 height='150px' style='position=Absolute' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        ShowAnalyticsData(CBMId, fromDate, toDate);

    });



    $("#BtnGenerate").click(function () {
        $('#ccCharat').html();
        $('#ccCharat').empty();
        var fromDate = $('#FromDate').val();
        var toDate = $("#ToDate").val();
        var CBMId = $('#hdnCBMId').val();
        var HData = $("#Hdata").val();
        //$('#ccCharat').remove();
        var xAxisLabel = 'Time';
        $("#CBMDashboardDetails").html("<img class=loading-img1 height='150px' style='position=Absolute' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        ShowCBMGraph(CBMId, fromDate, toDate, HData, xAxisLabel);

    });

    $("#BtnGenerateExcel").click(function () {

        $('#ccCharat').html();
        $('#ccCharat').empty();
        var fromDate = $('#FromDate').val();
        var toDate = $("#ToDate").val();

        var CBMId = $('#hdnCBMId').val();
        var HData = $("#Hdata").val();
        //$('#ccCharat').remove();
        var xAxisLabel = 'Time';
        var path = "/CBMDashboard/ExportData?cbmid=" + CBMId + "&fromDate=" + fromDate + "&toDate=" + toDate + "&HData=" + HData;

        //window.open(path, '_blank');
        window.open(path, '_blank');


    });

    function GetCBMAnalyticsData(machineID,fromDate,toDate) {
        $.ajax({
            url: "/CBMDashboard/GetCBMAnalyticsData",
            data: "{ 'machineId': '" + machineID + "', 'fromDate': '" + fromDate + "','toDate': '" + toDate + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {

                ddl = new Array();
                cbmData = new Array();
                maxData = new Array();
                minData = new Array();



                for (var i = 0; i < data.allTimes.length; i++) {
                    var k = i + 1;
                    ddl = new Array();
                    cbmData = new Array();
                    maxData = new Array();
                    minData = new Array();
                    for (var j = 0; j < data.allTimes[i].length; j++) {
                        ddl.push('Date - ' + data.allTimes[i][j]);
                        cbmData.push(data.CBMdata[i][j]);
                        maxData.push(data.MaxValue[i][j]);
                        minData.push(data.MinValue[i][j]);
                    }
                    //ddl.push(data.allTimes[i]);
                    $("#CBMAnalyticsDetails_" + machineID + "_" + k).html(data);

                    var name = data.paramName[i];
                    var CBMID = data.CBMID[i];
                    var unit = data.unit[i];
                    ShowCBMAnalyticsData(ddl, cbmData, maxData, minData, name, CBMID,unit)
                }

            }
        });
    }

    function ShowParameterHealth(machineID) {
        $.ajax({
            url: "/CBMDashboard/GetCBMAnalyticsParameterHealth",
            data: "{ 'machineId': '" + machineID + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                for (var i = 0; i < data.CBMID.length; i++) {
                    if (data.ParameterHealth[i] == "OK") {
                        $("#CbmStatus_" + data.CBMID[i]).css("background", "rgba(38,168,49, 1)");
                        $("#spanStatus_" + data.CBMID[i]).html("OK");
                    }
                    if (data.ParameterHealth[i] == "WARNING") {
                        $("#CbmStatus_" + data.CBMID[i]).css("background", "yellow");
                        $("#spanStatus_" + data.CBMID[i]).html("WARNING");
                    }
                    if (data.ParameterHealth[i] == "CRITICAL") {
                        $("#CbmStatus_" + data.CBMID[i]).css("background", "tomato");
                        $("#spanStatus_" + data.CBMID[i]).html("CRITICAL");
                    }
                    if (data.ParameterHealth[i] == null) {
                        $("#spanStatus_" + data.CBMID[i]).css("color", "white");
                        $("#spanStatus_" + data.CBMID[i]).html("CRITICAL");
                    }
                }
            }
        });
    }

    function ShowAnalyticsData(CBMId, fromDate, toDate) {
        $.ajax({
            url: "/CBMDashboard/GetAnalyticsData",
            data: "{ 'cbmid': '" + CBMId + "', 'fromDate': '" + fromDate + "','toDate': '" + toDate + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                if (data != "")
                    $("#CBMAnalyticsDetails").html(data);
                ddl = new Array();
                cbmData = new Array();
                maxdata = new Array();
                minData = new Array();

                var name = data.paramName;

                for (var i = 0; i < data.allTimes.length; i++) {
                    //ddl.push(data.allTimes[i]);
                    ddl.push('Date - ' + data.allTimes[i]);
                    cbmData.push(data.CBMdata[i]);
                    maxdata.push(data.MaxValue[i]);
                    minData.push(data.MinValue[i]);
                }
                ShowAnalytics(ddl, cbmData, maxdata, minData, name)

            }
        });
    }

    function ShowCBMGraph(CBMId, fromDate, toDate, HData, xAxisLabel) {
        $.ajax({
            url: "/CBMDashboard/CustomCBMData",
            data: "{ 'cbmid': '" + CBMId + "', 'fromDate': '" + fromDate + "','toDate': '" + toDate + "', 'HData': '" + HData + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                if (data != "")
                    $("#CBMDashboardDetails").html(data);
                ddl = new Array();
                cbmData = new Array();
                maxdata = new Array();
                minData = new Array();
                GmaxData = new Array();
                GminData = new Array();
                YmaxData = new Array();
                YminData = new Array();

                var unit = data.unit;
                var name = data.paramName;
                var diff = data.datediff + "Days";
                for (var i = 0; i < data.allTimes.length; i++) {
                    //ddl.push(data.allTimes[i]);
                    ddl.push('Date - ' + data.allTimes[i]);
                    cbmData.push(data.CBMdata[i]);
                    maxdata.push(data.MaxValue[i]);
                    minData.push(data.MinValue[i]);
                    GmaxData.push(data.GMaxVal[i]);
                    GminData.push(data.GMinVal[i]);
                    YmaxData.push(data.YMaxVal[i]);
                    YminData.push(data.YMinVal[i]);
                }
                ShowName(ddl, cbmData, maxdata, minData, GmaxData, GminData, YmaxData, YminData, xAxisLabel, unit, name, diff)

            }
        });
    }

    function initializeCBMData() {

        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        //console.log(machineID);
        cbmParams.length = 0;
        flowNumArr.length = 0;
        $.getJSON('/CBMDashboard/getCBMDetails', { machineId: machineID }, function (data) {
            $('.nav-tabs li.active a.machine-tab').addClass('graph-initialised');
            //resetAllLines();
            if (data.length > 0) {

                $("#TagNotFound1").html("");
                //PARSING THE TRACKING DATA RECIEVED FOR ENGINE SHOP
                $.each(data, function (idx, cbmObj) {

                    var cbmID = cbmObj.CBM_ID;
                    var imageID = cbmObj.Image_ID;
                    var cbmUOM = cbmObj.UOM;
                    var minVal = cbmObj.Min_Val;
                    var maxVal = cbmObj.Max_Val;
                    var greenMin = cbmObj.Green_Min_Val;
                    var greenMax = cbmObj.Green_Max_Val;
                    var warningMin = cbmObj.Warning_Min_Val;
                    var warningMax = cbmObj.Warning_Max_Val;
                    var currentState = cbmObj.Current_State;
                    var paramCategory = cbmObj.Parameter_Category;
                    var IsConversion_Factor = cbmObj.Is_Conversion_Factor;
                    var tagQuality = cbmObj.Tag_Remark;

                    if (IsConversion_Factor==2) {

                        //var currentValue = (cbmObj.Current_Value * cbmObj.Scale_Denominator).toFixed(2);
                        var currentValue = cbmObj.Current_Value * cbmObj.Scale_Denominator;
                        var value = parseFloat(currentValue).toFixed(2);
                        var value1 = parseFloat(value);
                        currentValue = value1;
                    }
                    else {
                        //var currentValue = (cbmObj.Current_Value / cbmObj.Scale_Denominator).toFixed(2);
                        var currentValue = cbmObj.Current_Value / cbmObj.Scale_Denominator;
                        var value = parseFloat(currentValue).toFixed(2);
                        var value1 = parseFloat(value);
                        currentValue = value1;
                    }

                    if (cbmObj.Current_Value > 30000) {
                        currentValue = 0;
                    }
                    var cbmDomObj = $('*[data-cbmID="cbm_' + cbmID + '"]');
                    var cbmAccesssor = 'cbm_' + cbmID;

                    var cbmChartObj = $("#" + cbmAccesssor);
                    var cbmBox = $("#" + cbmAccesssor + "_box");
                    cbmBox.find('#cbm-current-val').text(currentValue);
                    if (currentValue <= greenMax && currentValue >= greenMin) {
                        cbmBox.find('.cbm-current-val').addClass('bg-green-gradient').removeClass('bg-red-gradient').removeClass('bg-yellow-gradient');
                    } else if (currentValue > greenMax) {
                        if (currentValue > warningMax) {
                            cbmBox.find('.cbm-current-val').addClass('bg-red-gradient').removeClass('bg-green-gradient').removeClass('bg-yellow-gradient');
                        } else {
                            cbmBox.find('.cbm-current-val').addClass('bg-yellow-gradient').removeClass('bg-red-gradient').removeClass('bg-green-gradient');
                        }
                    } else if (currentValue < greenMin) {
                        if (currentValue < warningMin) {
                            cbmBox.find('.cbm-current-val').addClass('bg-red-gradient').removeClass('bg-green-gradient').removeClass('bg-yellow-gradient');
                        } else {
                            cbmBox.find('.cbm-current-val').addClass('bg-yellow-gradient').removeClass('bg-red-gradient').removeClass('bg-green-gradient');
                        }
                    }

                    tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                    switch (cbmObj.Parameter_Category) {


                        case "Pressure":
                        case "PRESSURE":

                            // ************************** start code 1
                            if (cbmObj.Image_ID == 1) {
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                var scaleDecimalVal = null;
                                if ((maxVal / 10) < 1) {
                                    scaleDecimalVal = 1;
                                }
                                cbmChartObj.attr("width", "230");

                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Color = ['#00ca6d', '#fff'];
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    Color = ['#00ca6d', '#fff'];
                                    //Color = ['Gradient(green:#fff)'];
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        Color = ['#f00', '#fff'];
                                    } else {
                                        Color = ['#ff5', '#fff'];
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        Color = ['#f00', '#fff'];
                                    } else {
                                        Color = ['#ff5', '#fff'];
                                    }
                                }
                                var unit1 = cbmUOM;
                                var unit = unit1.toLowerCase();
                                var pressureObj = new RGraph.SemiCircularProgress({

                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,

                                    path: {
                                        stroke: "grey",
                                    },
                                    options: {
                                        textColor: "Black",
                                        labelsCenter: "Temp",
                                        labelsCenterSize: 12,
                                        strokestyle: {
                                            color: '#ffff'
                                        },

                                        colors: Color,

                                        shadowColor: false,
                                        gutterTop: 50,
                                        textBold: true,
                                        centerUnitsPost: unit,
                                        labelsCenterUnitsPost: unit,
                                        labelsCenterBold: true,
                                        titleValign: "Bottom",
                                        labelsCenterDecimals: 1,
                                        background:
                                            {
                                                color: "White"
                                            },
                                        textAccessible: true,
                                        scale: {
                                            decimals: 2,

                                        }
                                    }
                                }).grow();
                                cbmParams[cbmAccesssor] = pressureObj;
                            }
                            // ************************** end code 1

                            // ************************ start code 2
                            if (cbmObj.Image_ID == 2) {
                                //tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                var scaleDecimalVal = null;
                                if ((maxVal / 10) < 1) {
                                    scaleDecimalVal = 1;
                                }
                                cbmChartObj.attr("width", "230");
                                var currentObj = new RGraph.Gauge({
                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,
                                    options: {
                                        scaleDecimals: scaleDecimalVal,
                                        tickmarksBig: 10,
                                        tickmarksSmall: 20,
                                        colorsRanges: [[minVal, maxVal, '#dd4b39'], [warningMin, warningMax, '#ff2'], [greenMin, greenMax, '#bada55']],
                                        labelsCount: 10
                                    }
                                }).draw();
                                cbmParams[cbmAccesssor] = currentObj;
                            }
                            //***************************** end code 2

                            // **************************** start code 3
                            if (cbmObj.Image_ID == 3) {
                                //tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }
                                ShowSolidGuage(current, Id, minVal, maxVal, cbmUOM, paramCategory);
                            }
                            //************************** end code 3

                            // ******************************** start code 4
                            if (cbmObj.Image_ID == 4) {
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }
                            // ******************************* end code 4
                            break;
                        case "Current":
                        case "CURRENT":
                            // *************************** start code 1
                            if (cbmObj.Image_ID == 11) {
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }

                                showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                            }
                            // **************************** end code 1

                            //****************************** start code 2
                            if (cbmObj.Image_ID == 12) {
                                //tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                var scaleDecimalVal = null;
                                if ((maxVal / 10) < 1) {
                                    scaleDecimalVal = 1;
                                }
                                cbmChartObj.attr("width", "230");
                                var currentObj = new RGraph.Gauge({
                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,
                                    options: {
                                        scaleDecimals: scaleDecimalVal,
                                        tickmarksBig: 10,
                                        tickmarksSmall: 20,
                                        colorsRanges: [[minVal, maxVal, '#dd4b39'], [warningMin, warningMax, '#ff2'], [greenMin, greenMax, '#bada55']],
                                        labelsCount: 10
                                    }
                                }).draw();
                                cbmParams[cbmAccesssor] = currentObj;
                            }
                            //*************************** end code 2

                            // ************************* start code 3
                            if (cbmObj.Image_ID == 13) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }
                                ShowSolidGuage(current, Id, minVal, maxVal, cbmUOM, paramCategory);
                            }
                            //************************** end code 3

                            // ******************************** start code 4
                            if (cbmObj.Image_ID == 14) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }
                            // ******************************* end code 4
                            break;

                        case "Voltage":
                        case "VOLTAGE":
                            // ***************************** start code 1
                            if (cbmObj.Image_ID == 15) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }

                                showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                            }
                            // ***************************** end code 1

                            //************************** start code 2
                            if (cbmObj.Image_ID == 16) {
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                var scaleDecimalVal = null;
                                if ((maxVal / 10) < 1) {
                                    scaleDecimalVal = 1;
                                }
                                cbmChartObj.attr("width", "230");
                                var voltageObj = new RGraph.Gauge({
                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,
                                    options: {
                                        scaleDecimals: scaleDecimalVal,
                                        tickmarksBig: 10,
                                        tickmarksSmall: 20,
                                        colorsRanges: [[minVal, maxVal, '#dd4b39'], [warningMin, warningMax, '#ff2'], [greenMin, greenMax, '#bada55']],
                                        labelsCount: 10
                                    }
                                }).draw();
                                cbmParams[cbmAccesssor] = voltageObj;
                            }
                            // ******************************** end code 2

                            // ******************************* start code 3
                            if (cbmObj.Image_ID == 17) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }
                                ShowSolidGuage(current, Id, minVal, maxVal, cbmUOM, paramCategory);
                            }
                            // ******************************* end code 3

                            // ******************************** start code 4
                            if (cbmObj.Image_ID == 18) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color",tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }
                            // ******************************* end code 4

                            //Start Code Number 3
                            //var temperatureObj = new RadialGauge({
                            //    renderTo: cbmAccesssor,
                            //    width: 230,
                            //    height: 225,
                            //    units: cbmUOM,
                            //    title: "Voltage",
                            //    minValue: minVal,
                            //    maxValue: maxVal,
                            //    //minValue: -50,
                            //    //maxValue:50,
                            //    value: currentValue,
                            //    //majorTicks: [
                            //    //    -50,
                            //    //    -40,
                            //    //    -30,
                            //    //    -20,
                            //    //    -10,
                            //    //    0,
                            //    //    10,
                            //    //    20,
                            //    //    30,
                            //    //    40,
                            //    //    50
                            //    //],
                            //    //minorTicks: 2,
                            //    //strokeTicks: true,
                            //    highlights: [
                            //        {
                            //            "from": greenMin,
                            //            "to": greenMax,
                            //            "color": "#00ca6d"
                            //        },
                            //        {
                            //            "from": greenMax,
                            //            "to": maxVal,
                            //            "color": "rgba(255, 0, 0, .3)"
                            //        }
                            //    ],

                            //    //ticksAngle: 225,
                            //    //startAngle: 67.5,
                            //    //colorMajorTicks: "#ddd",
                            //    //colorMinorTicks: "#ddd",
                            //    colorTitle: "#eee",
                            //    colorUnits: "#ccc",
                            //    colorNumbers: "#eee",
                            //    colorPlate: "#222",
                            //    borderShadowWidth: 0,
                            //    borders: true,
                            //    //needleType: "arrow",
                            //    //needleWidth: 2,
                            //    // needleCircleSize: 7,
                            //    animation: false,
                            //    //needleCircleOuter: true,
                            //    //needleCircleInner: false,
                            //    //animationDuration: 1500,
                            //    animationRule: "linear",
                            //    colorBorderOuter: "#333",
                            //    colorBorderOuterEnd: "#111",
                            //    colorBorderMiddle: "#222",
                            //    colorBorderMiddleEnd: "#111",
                            //    colorBorderInner: "#111",
                            //    colorBorderInnerEnd: "#333",
                            //    //colorNeedleShadowDown: "#333",
                            //    // colorNeedleCircleOuter: "#333",
                            //    // colorNeedleCircleOuterEnd: "#111",
                            //    // colorNeedleCircleInner: "#111",
                            //    // colorNeedleCircleInnerEnd: "#222",
                            //    valueBoxBorderRadius: 0,
                            //    colorValueBoxRect: "#222",
                            //    colorValueBoxRectEnd: "#333"
                            //}).draw();
                            //cbmParams[cbmAccesssor] = temperatureObj;
                            //End Code Number 3
                            break;
                        case "Temperature":
                            // ************************** start code 1
                            if (cbmObj.Image_ID == 5) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var tempColor = ['#00ca6d'];
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = ['#00ca6d'];
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = ['#f00'];
                                    } else {
                                        tempColor = ['#ff5'];
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = ['#f00'];
                                    } else {
                                        tempColor = ['#ff5'];
                                    }
                                }

                                cbmChartObj.attr("width", "80");
                                var temperatureObj = new RGraph.Thermometer({
                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,
                                    options: {
                                        scaleVisible: true,
                                        gutterLeft: 25,
                                        valueLabel: false,
                                        colors: tempColor,
                                        shadow: false,
                                    }
                                }).draw();
                                cbmParams[cbmAccesssor] = temperatureObj;
                            }
                            // ************************* end code 1


                            //******************************* start code 2
                            if (cbmObj.Image_ID == 6) {
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                cbmChartObj.attr("width", "80");
                                var tempColor = ['#00ca6d'];
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = ['#00ca6d'];
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = ['#f00'];
                                    } else {
                                        tempColor = ['#ff5'];
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = ['#f00'];
                                    } else {
                                        tempColor = ['#ff5'];
                                    }
                                }
                                var temperatureObj = new RGraph.Thermometer({
                                    id: cbmAccesssor,
                                    min: minVal,
                                    max: maxVal,
                                    value: currentValue,
                                    options: {
                                        scaleVisible: true,
                                        gutterLeft: 25,
                                        valueLabel: false,
                                        colors: tempColor
                                        //textAccessible: true
                                    }
                                }).grow();
                                cbmParams[cbmAccesssor] = temperatureObj;
                            }
                            //******************************** end code 2

                            //*************************** start code 3
                            if (cbmObj.Image_ID == 7) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }
                            //************************** end code 3
                            break;
                        case "Vibration":
                       


                            //*************************** start code 1
                            if (cbmObj.Image_ID == 8) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                cbmChartObj.attr("width", "250");

                                var vibrationObj = new RGraph.Line({
                                    id: cbmAccesssor,
                                    data: new Array(5),
                                    options: {
                                        gutterLeft: 35,
                                        ymax: maxVal,
                                        ymin: minVal,
                                        tickmarks: 'filledcircle',
                                        scaleDecimals: 1,
                                        linewidth: 1,
                                        backgroundHbars: [
                                            [minVal, warningMin - minVal, 'rgba(255, 49, 80, 0.73)'],
                                            [warningMin, greenMin - warningMin, 'rgba(255, 255, 119, 0.5)'],
                                            [greenMin, greenMax - greenMin, 'rgba(6, 255, 0, 0.39)'],
                                            [greenMax, warningMax - greenMax, 'rgba(255, 255, 119, 0.5)'],
                                            [warningMax, maxVal - warningMax, 'rgba(255, 49, 80, 0.73)'],
                                        ],
                                        shadow: null,
                                        backgroundGridVlines: false,
                                        backgroundGridBorder: false,
                                        backgroundGridColor: '#eee',
                                        colors: ['#058DC7'],
                                        numxticks: 5,
                                        unitsPost: cbmUOM,
                                        yaxispos: 'right',
                                        axisColor: '#666',
                                        textColor: '#666',
                                        textSize: 14,
                                        linewidth: 2,
                                        labels: ['25s', '20s', '15s', '10s', '5s', '0s'],
                                        noxaxis: true,
                                        textAccessible: true
                                    }
                                }).draw();
                                cbmParams[cbmAccesssor] = vibrationObj;
                                flowNumArr[cbmAccesssor] = ((((maxVal) - (minVal)) / 2) + (minVal));
                            }
                            //********************************** end code 1

                            // ******************************** start code 2
                            if (cbmObj.Image_ID == 9) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }
                            // ******************************* end code 2
                            break;

                        case "Distance":
                          //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                            if (currentValue < 0) {
                                currentValue = minVal;
                            }
                            else if (currentValue < minVal) {
                                currentValue = minVal;
                            }
                            else if (currentValue > maxVal) {
                                currentValue = maxVal;
                            }
                            var Id = parseInt(cbmID);

                            var tempColor = '#00ca6d';
                            if (currentValue <= greenMax && currentValue >= greenMin) {
                                tempColor = '#00ca6d';
                            } else if (currentValue > greenMax) {
                                if (currentValue > warningMax) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            } else if (currentValue < greenMin) {
                                if (currentValue < warningMin) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            }

                            $("#lblCurrentValue_" + Id).html(currentValue);
                            $("#lblCurrentValue_" + Id).css("color", tempColor);
                            $("#span_" + Id).html(cbmUOM);
                            $("#span_" + Id).css("color", tempColor);
                            break;

                        case "Flow":
                          //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                            if (currentValue < 0) {
                                currentValue = minVal;
                            }
                            else if (currentValue < minVal) {
                                currentValue = minVal;
                            }
                            else if (currentValue > maxVal) {
                                currentValue = maxVal;
                            }
                            var Id = parseInt(cbmID);

                            var tempColor = '#00ca6d';
                            if (currentValue <= greenMax && currentValue >= greenMin) {
                                tempColor = '#00ca6d';
                            } else if (currentValue > greenMax) {
                                if (currentValue > warningMax) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            } else if (currentValue < greenMin) {
                                if (currentValue < warningMin) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            }

                            $("#lblCurrentValue_" + Id).html(currentValue);
                            $("#lblCurrentValue_" + Id).css("color", tempColor);
                            $("#span_" + Id).html(cbmUOM);
                            $("#span_" + Id).css("color", tempColor);
                            break;

                        case "Torque":
                            if (cbmObj.Image_ID == 23) {
                             //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                            }


                            else {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var current = new Array();
                                var Id = parseInt(cbmID);
                                var value = Math.round(parseFloat(currentValue), 2);
                                var l = 0;
                                for (l = 0; l < 1; l++) {
                                    current.push(currentValue)
                                }

                                showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                            }
                            break;

                        case "Level":
                        case "LEVEL":
                            if (cbmObj.Image_ID == 10) {
                              //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                cbmChartObj.attr("width", "230");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }



                                var config1 = liquidFillGaugeDefaultSettings();

                                config1.minValue = minVal;
                                config1.maxValue = maxVal;
                                config1.displayPercent = false;
                                config1.waveAnimateTime = 1000;
                                cbmParams[cbmAccesssor] = loadLiquidFillGauge(cbmAccesssor, currentValue, config1);
                            }
                            break;

                        case "Speed":
                           // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                            if (currentValue < 0) {
                                currentValue = minVal;
                            }
                            else if (currentValue < minVal) {
                                currentValue = minVal;
                            }
                            else if (currentValue > maxVal) {
                                currentValue = maxVal;
                            }
                            var Id = parseInt(cbmID);

                            var tempColor = '#00ca6d';
                            if (currentValue <= greenMax && currentValue >= greenMin) {
                                tempColor = '#00ca6d';
                            } else if (currentValue > greenMax) {
                                if (currentValue > warningMax) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            } else if (currentValue < greenMin) {
                                if (currentValue < warningMin) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            }

                            $("#lblCurrentValue_" + Id).html(currentValue);
                            $("#lblCurrentValue_" + Id).css("color", tempColor);
                            $("#span_" + Id).html(cbmUOM);
                            $("#span_" + Id).css("color", tempColor);
                            break;
                        default:
                           // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                            if (currentValue < 0) {
                                currentValue = minVal;
                            }
                            else if (currentValue < minVal) {
                                currentValue = minVal;
                            }
                            else if (currentValue > maxVal) {
                                currentValue = maxVal;
                            }
                            var Id = parseInt(cbmID);

                            var tempColor = '#00ca6d';
                            if (currentValue <= greenMax && currentValue >= greenMin) {
                                tempColor = '#00ca6d';
                            } else if (currentValue > greenMax) {
                                if (currentValue > warningMax) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            } else if (currentValue < greenMin) {
                                if (currentValue < warningMin) {
                                    tempColor = '#f00';
                                } else {
                                    tempColor = '#ff5';
                                }
                            }

                            $("#lblCurrentValue_" + Id).html(currentValue);
                            $("#lblCurrentValue_" + Id).css("color", tempColor);
                            $("#span_" + Id).html(cbmUOM);
                            $("#span_" + Id).css("color", tempColor);
                            break;
                    }
                });
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {

            // Ajax fail callback function.
            // console.log('Error getting cycle step Signal !');
            //alert("Error getting cycle step Signal !");
            //$("#TagNotFound").html("Error Getting data from kepware");
            $("#TagInvalid").html();
            //$("#TagNotFound1").html("Error: Not Connected To Kepware");
           // $("#TagNotFound1").addClass('blinker1');
           // $(".notification").show();
           // myApp.notification.showNotification('warning', 'Warning', 'Some Warning message goes here!');
        });
        updateMachineStatus(machineID);
    }

    function showchart(currentValue, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax) {



        $('#vchart' + Id).highcharts({
            chart: {
                type: 'gauge',
                plotBackgroundColor: null,
                plotBackgroundImage: null,
                plotBorderWidth: 0,
                plotShadow: false,


            },
            exporting: false,

            credits: {
                enabled: false
            },
            title: {
                text: null,
                //font : '10px'
            },

            pane: {
                startAngle: -150,
                endAngle: 150,
                background: [{
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                        //stops: [
                        //    [0, '#FFF'],
                        //    [1, '#333']
                        //]
                    },
                    borderWidth: 7,
                    animation: false,
                    outerRadius: '109%'
                },

                {
                    // default background
                },
                {
                    backgroundColor: null,
                    borderWidth: 0,
                    outerRadius: '0%',
                    innerRadius: '0%'
                }]
            },

            // the value axis
            yAxis: {
                min: minVal,
                max: maxVal,
                //minorTickInterval: 'auto',
                minorTickWidth: 0,
                minorTickLength: 10,
                minorTickPosition: 'inside',
                minorTickColor: 'green',

                tickPixelInterval: 40,
                tickWidth: 2,
                tickPosition: 'inside',
                tickLength: 10,
                tickColor: '#666',
                labels: {
                    //step: 2,
                    //rotation: 'auto'
                    // rotation: -0,

                },
                //title: {
                //    text: 'km/h'
                //},
                colorsRanges: [[minVal, maxVal, '#dd4b39'], [warningMin, warningMax, '#ff2'], [greenMin, greenMax, '#bada55']],
                plotBands: [
                    {
                        from: minVal,
                        to: maxVal,
                        color: '#DF5353' // red
                    },
                    {
                        from: warningMin,
                        to: warningMax,
                        color: '#DDDF0D' // yellow
                    },
                    {
                        from: greenMin,
                        to: greenMax,
                        color: '#55BF3B' // green
                    },
                    //{
                    //    from: greenMax,
                    //    to: warningMax,
                    //    color: '#DDDF0D' // yellow
                    //},
                    //{
                    //    from: warningMax,
                    //    to: maxVal,
                    //    color: '#DF5353' // red
                    //}
                ]

            },


            series: [{
                name: paramCategory,
                data: currentValue,
                animation: false,
                dataLabels: {
                    enabled: true,
                    format: '{point.y}' + cbmUOM,
                    //rotation: -0,
                    margin: 10,
                    color: 'green',
                },
                tooltip: {
                    valueSuffix: cbmUOM
                }
            }]

        }

       );
    }

    function showPressureChart(currentValue, Id, minVal, maxVal, cbmUOM, paramCategory) {


        $('#chart' + Id).highcharts({
            chart: {
                type: 'solidgauge',
                plotBackgroundColor: null,
                plotBackgroundImage: null,
                plotBorderWidth: 0,
                plotShadow: false,
                exporting: false,

            },
            exporting: false,
            credits: {
                enabled: false
            },
            title: {
                text: null,
                //font : '10px'
            },

            pane: {
                center: ['50%', '85%'],
                size: '140%',
                startAngle: -90,
                endAngle: 90,
                background: {
                    backgroundColor: null,
                    shape: 'arc',
                    outerRadius: '60%',
                    innerRadius: '100%'
                }
            },

            // the value axis
            yAxis: {
                min: minVal,
                max: maxVal,
                //minorTickInterval: 'auto',

                labels: {
                    //step: 2,
                    //rotation: 'auto'
                    // rotation: -0,

                },
                //title: {
                //    text: 'km/h'
                //},
                plotBands: [{
                    from: 0,
                    to: 120,
                    // color: '#55BF3B' // green
                }, {
                    from: 120,
                    to: 160,
                    //  color: '#DDDF0D' // yellow
                }, {
                    from: 160,
                    to: 200,
                    // color: '#DF5353' // red
                }]

            },


            series: [{
                name: paramCategory,
                data: currentValue,
                animation: false,
                dataLabels: {
                    enabled: true,
                    format: '{y:.1f}' + cbmUOM,
                    //rotation: -0,
                    margin: 10,
                    color: 'green',
                },
                tooltip: {
                    valueSuffix: cbmUOM
                }
            }]

        }

       );
    }

    function updateCBMData() {

        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        //console.log(machineID);

        $.getJSON('/CBMDashboard/getCBMDetails', { machineId: machineID }, function (data) {
            //resetAllLines();

            if (data.length > 0) {

                $("#TagNotFound1").html("");
                //PARSING THE TRACKING DATA RECIEVED FOR ENGINE SHOP
                $.each(data, function (idx, cbmObj) {

                    var cbmID = cbmObj.CBM_ID;
                    var imageID = cbmObj.Image_ID;
                    var cbmAccesssor = 'cbm_' + cbmID;
                    var cbmCurrentValue = 0;
                    var cbmUOM = cbmObj.UOM;
                    var minVal = cbmObj.Min_Val;
                    var maxVal = cbmObj.Max_Val;
                    var greenMin = cbmObj.Green_Min_Val;
                    var greenMax = cbmObj.Green_Max_Val;
                    var warningMin = cbmObj.Warning_Min_Val;
                    var warningMax = cbmObj.Warning_Max_Val;
                    var currentState = cbmObj.Current_State;
                    var paramCategory = cbmObj.Parameter_Category;
                    var IsConversion_Factor = cbmObj.IsConversion_Factor;
                    var tagQuality = cbmObj.Tag_Remark;

                    if(IsConversion_Factor==2)
                    {
                        var currentValue = cbmObj.Current_Value * cbmObj.Scale_Denominator;
                        var value = parseFloat(currentValue).toFixed(2);
                        var value1 = parseFloat(value);
                        currentValue = value1;
                    }
                    else
                    {
                        var currentValue = cbmObj.Current_Value / cbmObj.Scale_Denominator;
                        var value = parseFloat(currentValue).toFixed(2);
                        var value1 = parseFloat(value);
                        currentValue = value1;
                    }

                    if (cbmObj.Current_Value > 30000) {
                        currentValue = 0;
                    }
                    var cbmDomObj = $('*[data-cbmID="cbm_' + cbmID + '"]');
                    var cbmChartObj = cbmParams[cbmAccesssor];
                    var cbmBox = $("#" + cbmAccesssor + "_box");

                    if (currentState == false) {
                        cbmBox.find('.overlay').remove();
                        var overlayBody = '<div class="overlay">' +
                                          '<i class="fa fa-power-off"></i>' +
                                          '<h4 class="bold bg-gray">CYCLE OFF</h4>' +
                                          '</div>';
                        cbmBox.append(overlayBody);
                        //if (cbmObj.Parameter_Category == 'Flow' && cbmObj.Parameter_Category != 'Level') {
                        if (cbmObj.Parameter_Category == 'Temperature') {
                            cbmChartObj.value = 0;
                            cbmChartObj.grow();
                        }
                        //if (cbmObj.Parameter_Category == 'Temperature') {
                        //    cbmChartObj.value = 0;
                        //    cbmChartObj.grow();
                        //}

                        cbmBox.find('.cbm-current-val').addClass('bg-gray').removeClass('bg-green-gradient').removeClass('bg-red-gradient').removeClass('bg-yellow-gradient');
                        cbmBox.find('.cbm-current-val h3').text(0);
                    } else {
                        cbmBox.find('.overlay').remove();
                        cbmBox.find('#cbm-current-val').text(currentValue.toFixed(2));

                        if (currentValue <= greenMax && currentValue >= greenMin) {
                            cbmBox.find('.cbm-current-val').addClass('bg-green-gradient').removeClass('bg-red-gradient').removeClass('bg-yellow-gradient');
                        } else if (currentValue > greenMax) {
                            if (currentValue > warningMax) {
                                cbmBox.find('.cbm-current-val').addClass('bg-red-gradient').removeClass('bg-green-gradient').removeClass('bg-yellow-gradient');
                            } else {
                                cbmBox.find('.cbm-current-val').addClass('bg-yellow-gradient').removeClass('bg-red-gradient').removeClass('bg-green-gradient');
                            }
                        } else if (currentValue < greenMin) {
                            if (currentValue < warningMin) {
                                cbmBox.find('.cbm-current-val').addClass('bg-red-gradient').removeClass('bg-green-gradient').removeClass('bg-yellow-gradient');
                            } else {
                                cbmBox.find('.cbm-current-val').addClass('bg-yellow-gradient').removeClass('bg-red-gradient').removeClass('bg-green-gradient');
                            }
                        }
                        tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                        switch (cbmObj.Parameter_Category) {
                            case "Pressure":
                            case "PRESSURE":

                                // *************************** start code 1
                                if (cbmObj.Image_ID == 1) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    cbmChartObj.value = currentValue;
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        // cbmChartObj.options = { colors: ['Gradient(#0c0:green:#6f6:#cfc)'] };
                                        cbmChartObj.set({
                                            colors: ['#00ca6d', '#fff'],
                                        }).grow();
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00', '#fff'],
                                            }).grow();
                                        } else {
                                            // cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5', '#fff'],
                                            }).grow();
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00', '#fff'],
                                            }).grow();
                                        } else {
                                            //cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5', '#fff'],
                                            }).grow();
                                        }
                                    }
                                }
                                // ****************************** end code 1

                                //************************** start code 2
                                if (cbmObj.Image_ID == 2) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    cbmChartObj.value = currentValue;
                                    cbmChartObj.grow();
                                }
                                //******************** end code 2

                                //********************** start code 3
                                if (cbmObj.Image_ID == 3) {
                                 //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    var chart = $('#cbm_' + Id).highcharts(),
                point,
                newVal;

                                    if (chart) {
                                        point = chart.series[0].points[0];

                                        point.update(current);
                                    }
                                }

                                //*********************** end code 3


                                // ***************************** start code 4
                                if (cbmObj.Image_ID == 4) {
                                 //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }
                                // ***************************** end code 4
                                break;


                            case "Current":
                            case "CURRENT":
                                // ******************* start code 1
                                if (cbmObj.Image_ID == 11) {
                                 //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                                }
                                // ******************* end code 1

                                //*********************** start code 2
                                if (cbmObj.Image_ID == 12) {
                                 //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    cbmChartObj.value = currentValue;
                                    cbmChartObj.grow();
                                }
                                //********************* end code 2

                                //********************** start code 3
                                if (cbmObj.Image_ID == 13) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    var chart = $('#cbm_' + Id).highcharts(),
                point,
                newVal;

                                    if (chart) {
                                        point = chart.series[0].points[0];

                                        point.update(current);
                                    }
                                }
                                //************************* end code 3


                                // ***************************** start code 4
                                if (cbmObj.Image_ID == 14) {
                                 //   tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }
                                // ***************************** end code 4

                                break;

                            case "Voltage":
                            case "VOLTAGE":
                                //***************** start code 1
                                if (cbmObj.Image_ID == 15) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                                }
                                //****************** end code 1

                                //********************** start code 2
                                if (cbmObj.Image_ID == 16) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    cbmChartObj.value = currentValue;
                                    cbmChartObj.grow();
                                }
                                //************************** end code 2

                                // ************************** start code 3
                                if (cbmObj.Image_ID == 17) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    var chart = $('#cbm_' + Id).highcharts(),
                point,
                newVal;

                                    if (chart) {
                                        point = chart.series[0].points[0];

                                        point.update(current);
                                    }
                                }
                                // *************************** end code 3

                                // ***************************** start code 4
                                if (cbmObj.Image_ID == 18) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }
                                // ***************************** end code 4




                                //*************************start code 3
                                //var voltageObj = new RadialGauge({
                                //    renderTo: cbmAccesssor,
                                //    width: 230,
                                //    height: 225,
                                //    units: cbmUOM,
                                //    title: "Voltage",
                                //    minValue: minVal,
                                //    maxValue: maxVal,
                                //    //minValue: -50,
                                //    //maxValue:50,
                                //    value: currentValue,
                                //    //majorTicks: [
                                //    //    -50,
                                //    //    -40,
                                //    //    -30,
                                //    //    -20,
                                //    //    -10,
                                //    //    0,
                                //    //    10,
                                //    //    20,
                                //    //    30,
                                //    //    40,
                                //    //    50
                                //    //],
                                //    //minorTicks: 2,
                                //    //strokeTicks: true,
                                //    highlights: [
                                //        {
                                //            "from": greenMin,
                                //            "to": greenMax,
                                //            "color": "#00ca6d"
                                //        },
                                //        {
                                //            "from": greenMax,
                                //            "to": maxVal,
                                //            "color": "rgba(255, 0, 0, .3)"
                                //        }
                                //    ],

                                //    //ticksAngle: 225,
                                //    //startAngle: 67.5,
                                //    //colorMajorTicks: "#ddd",
                                //    //colorMinorTicks: "#ddd",
                                //    colorTitle: "#eee",
                                //    colorUnits: "#ccc",
                                //    colorNumbers: "#eee",
                                //    colorPlate: "#222",
                                //    borderShadowWidth: 0,
                                //    borders: true,
                                //    //needleType: "arrow",
                                //    //needleWidth: 2,
                                //    // needleCircleSize: 7,
                                //    animation: false,
                                //    //needleCircleOuter: true,
                                //    //needleCircleInner: false,
                                //    //animationDuration: 1500,
                                //    animationRule: "linear",
                                //    colorBorderOuter: "#333",
                                //    colorBorderOuterEnd: "#111",
                                //    colorBorderMiddle: "#222",
                                //    colorBorderMiddleEnd: "#111",
                                //    colorBorderInner: "#111",
                                //    colorBorderInnerEnd: "#333",
                                //    //colorNeedleShadowDown: "#333",
                                //    // colorNeedleCircleOuter: "#333",
                                //    // colorNeedleCircleOuterEnd: "#111",
                                //    // colorNeedleCircleInner: "#111",
                                //    // colorNeedleCircleInnerEnd: "#222",
                                //    valueBoxBorderRadius: 0,
                                //    colorValueBoxRect: "#222",
                                //    colorValueBoxRectEnd: "#333"
                                //}).draw();
                                //cbmParams[cbmAccesssor] = voltageObj;
                                //************************** end code 3

                                break;


                            case "TEMPRATURE":
                            case "Temperature":

                                // ******************** start code 1
                                if (cbmObj.Image_ID == 5) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    RGraph.clear(cbmChartObj.canvas);
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    cbmChartObj.value = currentValue;
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        // cbmChartObj.options = { colors: ['Gradient(#0c0:green:#6f6:#cfc)'] };
                                        cbmChartObj.set({
                                            colors: ['#00ca6d'],
                                        }).grow();
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00'],
                                            }).grow();
                                        } else {
                                            // cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5'],
                                            }).grow();
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00'],
                                            }).grow();
                                        } else {
                                            //cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5'],
                                            }).grow();
                                        }
                                    }
                                }
                                // ******************** end code 1

                                //****************** start code 2
                                if (cbmObj.Image_ID == 6) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    RGraph.clear(cbmChartObj.canvas);
                                    cbmChartObj.value = currentValue;
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        // cbmChartObj.options = { colors: ['Gradient(#0c0:green:#6f6:#cfc)'] };
                                        cbmChartObj.set({
                                            colors: ['#00ca6d'],
                                        }).grow();
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00'],
                                            }).grow();
                                        } else {
                                            // cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5'],
                                            }).grow();
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            // cbmChartObj.options = { colors: ['Gradient(#c00:red:#f66:#fcc)'] };
                                            cbmChartObj.set({
                                                colors: ['#f00'],
                                            }).grow();
                                        } else {
                                            //cbmChartObj.options = { colors: ['Gradient(#ff0:yellow:#ff6:#ffc)'] };
                                            cbmChartObj.set({
                                                colors: ['#ff5'],
                                            }).grow();
                                        }
                                    }
                                }
                                // ************************ end code 2

                                // *********************** start code 3
                                if (cbmObj.Image_ID == 7) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }
                                // *********************** end code 3
                                break;


                            case "Vibration":


                                // *************************** start code 1
                                if (cbmObj.Image_ID == 8) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    RGraph.clear(cbmChartObj.canvas);

                                    // Generate a random number between -5 and 5 and add it to the num
                                    // variable. Adding asmall change instead of generating a whole new
                                    // number result in a gentler change.
                                    flowNumArr[cbmAccesssor] = currentValue;

                                    // Limit the num variable to min - max
                                    flowNumArr[cbmAccesssor] = Math.max(minVal, flowNumArr[cbmAccesssor]);
                                    flowNumArr[cbmAccesssor] = Math.min(maxVal, flowNumArr[cbmAccesssor]);

                                    // Remove a number from the front of the data array
                                    cbmChartObj.original_data[0].shift();

                                    // Add the new number on to end of the data array
                                    cbmChartObj.original_data[0].push(flowNumArr[cbmAccesssor]);

                                    // Draw the chart
                                    cbmChartObj.draw();

                                }
                                // *************** end code 1


                                // ***************************** start code 2
                                if (cbmObj.Image_ID == 9) {
                                    //tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }
                                // ***************************** end code 2
                                break;

                            case "Distance":
                                //tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);
                                
                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);




                               // var eqpDomObj = $('*[id="CBM_' + Id + '"]');
                               //// eqpDomObj.find('.eqp-remaining-life').text(eqpRemainingLife + " / " + eqpTotalLife);
                               //// eqpDomObj.find('.eqp-remaining-cycle').text(eqpConsumedLife);
                               // $("#prg_" + Id).css('width', currentValue);
                               // $("#prg_" + Id).css("color", tempColor);
                               //// eqpDomObj.find('.eqp-remcycle-perc').css('width', totalRemainingPerc + "%");
                               // $("#prg_" + Id).prev().text(currentValue);
                               // //eqpDomObj.find('.eqp-remcycle-perc').prev().text(totalRemainingPerc + "%");
                               // $("#prg_" + Id).css("background-color", tempColor);

                                break;

                            case "Flow":
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                                break;

                            case "Torque":
                                if (cbmObj.Image_ID == 23) {
                                  //  tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var Id = parseInt(cbmID);

                                    var tempColor = '#00ca6d';
                                    if (currentValue <= greenMax && currentValue >= greenMin) {
                                        tempColor = '#00ca6d';
                                    } else if (currentValue > greenMax) {
                                        if (currentValue > warningMax) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    } else if (currentValue < greenMin) {
                                        if (currentValue < warningMin) {
                                            tempColor = '#f00';
                                        } else {
                                            tempColor = '#ff5';
                                        }
                                    }

                                    $("#lblCurrentValue_" + Id).html(currentValue);
                                    $("#lblCurrentValue_" + Id).css("color", tempColor);
                                    $("#span_" + Id).html(cbmUOM);
                                    $("#span_" + Id).css("color", tempColor);
                                }

                                else {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }
                                    var current = new Array();
                                    var Id = parseInt(cbmID);
                                    var value = Math.round(parseFloat(currentValue), 2);
                                    var l = 0;
                                    for (l = 0; l < 1; l++) {
                                        current.push(currentValue)
                                    }

                                    showchart(current, Id, minVal, maxVal, cbmUOM, paramCategory, warningMin, warningMax, greenMin, greenMax);
                                }
                                break;
                            case "Level":
                            case "LEVEL":
                                if (cbmObj.Image_ID == 10) {
                                   // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                    if (currentValue < 0) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue < minVal) {
                                        currentValue = minVal;
                                    }
                                    else if (currentValue > maxVal) {
                                        currentValue = maxVal;
                                    }

                                    //var currentPercent = ((currentValue / maxVal) * 100).toFixed(2);
                                    cbmParams[cbmAccesssor].update(currentValue);
                                }
                                break;

                            case "Speed":
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                                break;

                            default:
                               // tagQuality != "" || tagQuality != null ? $("#TagInvalid_" + cbmID).html(tagQuality) : $("#TagInvalid_" + cbmID).html("");
                                if (currentValue < 0) {
                                    currentValue = minVal;
                                }
                                else if (currentValue < minVal) {
                                    currentValue = minVal;
                                }
                                else if (currentValue > maxVal) {
                                    currentValue = maxVal;
                                }
                                var Id = parseInt(cbmID);

                                var tempColor = '#00ca6d';
                                if (currentValue <= greenMax && currentValue >= greenMin) {
                                    tempColor = '#00ca6d';
                                } else if (currentValue > greenMax) {
                                    if (currentValue > warningMax) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                } else if (currentValue < greenMin) {
                                    if (currentValue < warningMin) {
                                        tempColor = '#f00';
                                    } else {
                                        tempColor = '#ff5';
                                    }
                                }

                                $("#lblCurrentValue_" + Id).html(currentValue);
                                $("#lblCurrentValue_" + Id).css("color", tempColor);
                                $("#span_" + Id).html(cbmUOM);
                                $("#span_" + Id).css("color", tempColor);
                                break;
                        }
                    }//current status ELSE END
                });
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            // Ajax fail callback function.
            $("#TagNotFound1").html("Error Getting Data From Kepware");
            $("#TagNotFound1").addClass('blinker1');
            //$(".notification").show();
           // console.log('Error getting cycle step Signal !');
        });

        updateMachineStatus(machineID);
    }


    $(document).ready(function () {
        $("#analyze").hide();
        $("#machine").show();
        $("#SubPredictedtab").hide();
        debugger;
        "@ViewBag.IsAnalytics" == "True" ? $("#Analytics").css("display", "block") : $("#Analytics").css("display", "none")
        "@ViewBag.IsAnalytics" == "True" ? $("#Prediction").css("display", "block") : $("#Prediction").css("display", "none")
        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        initializeCBMData();
        if ($("#machinetab").hasClass("Active") == true) {
            repeater = setInterval(updateCBMData, 9000);
        }

        if ($("#Analytics").hasClass("Active")==true) {
            repeater = setInterval(ShowParameterHealth(machineID), 10000);
        }

        //repeater = setInterval(initializeCBMData, 9000);

        //$('.nav-tabs li a.machine-tab').on('click', function () {
        //    //var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        //    //alert(machineID);

        //});
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            if ($(this).hasClass('graph-initialised') == false) {
                initializeCBMData();
            }
        });
        //$.getJSON('/CBMDashboard/getCBMDetails', { machineId: machineID }, function (data) {

        //});
         $("#BtnGenerateCBMAnalytics").click(function () {
        debugger;

        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        var fromDate = $('#FromDateCBMAnalytics').val();
        var toDate = $('#ToDateCBMAnalytics').val();
         for (var j = 1; j <= @ViewBag.CBMCount; j++) {
            $("#CBMAnalyticsDetails_" + machineID + "_" + j).html("");
        }
         for (var k = 1;  k <= @ViewBag.CBMCount; k++) {
            $("#CBMAnalyticsDetails_" + machineID + "_" + k).html("<img class=loading-img1 height='150px' style='position=Absolute' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        }
             GetCBMAnalyticsData(machineID, fromDate, toDate);



        });

        $.getJSON('/CBMDashboard/getCBMGroupDetails', { machineId: machineID }, function (data) {
            debugger;
            for (var i = 0; i < data.List.length; i++) {
                var date1;
                var date2;
                date2 = new Date();
                var Machine_ID = $("#Machine_ID").val();
                date1 = new Date(date2.setDate(date2.getDate()));
                //strDate = moment(date1).format("YYYY/MM/DD") + ' 8:51:00 ';
                endDate = moment(date1).format("YYYY/MM/DD HH:mm:ss");
                var inMinutes = 5;
                debugger;
                date1.setMinutes(date1.getMinutes() - inMinutes);
                strDate = moment(date1).format("YYYY/MM/DD HH:mm:ss");
                $("#fromdatedatepicker_" + data.List[i].CBM_Group_ID).val(strDate);
                $("#todatedatepicker_" + data.List[i].CBM_Group_ID).val(endDate);
            }




        }).fail(function (jqXHR, textStatus, errorThrown) {
            // Ajax fail callback function.
            alert('Error getting CBM History Data !');
        })
    });

    function updateMachineStatus(machineID)
    {

        $.getJSON('/CBMDashboard/getMachineStatus', { machineId: machineID }, function (data) {
            $("#PLCStatus").html("");

            if (data.CType == 2) {
                if (data.MDBStatus == 1) {
                    $("#result_" + machineID).css("background", "rgba(38,168,49, 1)");
                    $("#spanStatus").html("Running", "black");
                }
                if (data.MDBStatus == 2) {
                    $("#result_" + machineID).css("background", "rgba(255,99,71, 1)");
                    $("#spanStatus").html("Faulty", "black");
                }
                if (data.MDBStatus == 3) {
                    $("#result_" + machineID).css("background", "rgba(210,190,90, 1)");
                    $("#spanStatus").html("Idle", "black");
                }
                if (data.MDBStatus == 4) {
                    $("#result_" + machineID).css("background", "rgba(255, 220, 50, 1)");
                    $("#spanStatus").html("Disconnected", "black");
                   // $("#PLCStatus").html("Connection Failed");
                    $("#PLCStatus").addClass('blinker1');
                }
            }
            else {
                if (data.MStatus == false) {
                    $("#result_" + machineID).css("background", "rgba(255, 220, 50, 1)");
                    $("#spanStatus").html("Disconnected", "black");
                    $("#PLCStatus").html("OPC Server Disconnected");
                    $("#PLCStatus").addClass('blinker1');
                }
                else if (data.MStatus == true && data.Status.length > 0) {

                    if (data.MStatus == true && data.Status[0].Heart_Bit == true) {
                        if (data.Status[0].isHealthy == true) {
                            $("#result_" + machineID).css("background", "rgba(38,168,49, 1)");
                            $("#spanStatus").html("Running", "black");
                        }
                        else if (data.Status[0].isFaulty == true) {
                            $("#result_" + machineID).css("background", "rgba(255,99,71, 1)");
                            $("#spanStatus").html("Faulty", "black");
                        }
                        else if (data.Status[0].isIdle == true)  {
                            $("#result_" + machineID).css("background", "rgba(210,190,90, 1)");
                            $("#spanStatus").html("Idle", "black");
                        }
                        else {
                            //$("#result_" + machineID).css("background", "rgba(255, 220, 50, 1)");
                            $("#result_" + machineID).css("background", "rgba(38,168,49, 1)");
                            $("#spanStatus").html("Connected", "black");
                            //$("#PLCStatus").html("M/C PLC Connection Failed");
                            //$("#PLCStatus").addClass('blinker1');
                        }
                    }
                    else if (data.MStatus == true && data.Status[0].Heart_Bit == false) {
                        $("#result_" + machineID).css("background", "rgba(255, 220, 50, 1)");
                        $("#spanStatus").html("Disconnected", "black");
                        $("#PLCStatus").html("M/C PLC Disconnected");
                        $("#PLCStatus").addClass('blinker1');
                    }
                }
                else if (data.MStatus == true && data.Status.length == 0) {
                    $("#result_" + machineID).css("background", "rgba(255, 220, 50, 1)");
                    $("#spanStatus").html("Disconnected", "black");
                    $("#PLCStatus").html("M/C PLC Disconnected");
                    $("#PLCStatus").addClass('blinker1');
                }
            }
        })
    }

    function GetCBMData(machineID) {
        $.getJSON('/CBMDashboard/getCBMID', { machineId: machineID }, function (data) {
            if (data.length > 0) {

                $('#CBMParameter option').remove();
                $('#CBMParameter').append('<option value="">Select CBM Parameter</option>');
                for (var i = 0; i < data.length; i++) {
                    $('#CBMParameter').append('<option value="' +
                        data[i].Id + '">' + data[i].Value + '</option>');
                }
            }

        })
    }

    function MyFunction2(CBMID) {

        $('#ccCharat').html();
        $('#ccCharat').empty();
        var date1 = new Date();
        var toDate = new Date();
        toDate = moment(toDate).format("DD/MM/YY HH:mm");
        var fromDate = new Date(date1.getTime() - 10*60000);
        fromDate = moment(fromDate).format("DD/MM/YY HH:mm");
        $('#FromDate').val(fromDate);
        $('#ToDate').val(toDate);
        $('#hdnCBMId').val(CBMID);
        $("#Hdata").val("AllData");
        var HData = $("#Hdata").val();
        //$('#ccCharat').remove();
        var xAxisLabel = 'Time';
        $("#CBMDashboardDetails").html("<img class=loading-img1 height='150px' style='position=Absolute' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        ShowCBMGraph(CBMID, fromDate, toDate, HData, xAxisLabel);
        //$.ajax({
        //    url: "/CBMDashboard/LiveCBMData",
        //    data: "{ 'cbmid': '" + CBMID + "'}",
        //    dataType: "json",
        //    type: "POST",
        //    contentType: "application/json; charset=utf-8",
        //    success: function (data) {

        //        if (data != "")
        //            $("#CBMDashboardDetails").html(data);
        //        ddl = new Array();
        //        cbmData = new Array();
        //        maxData = new Array();
        //        minData = new Array();
        //        GmaxData = new Array();
        //        GminData = new Array();
        //        YmaxData = new Array();
        //        YminData = new Array();

        //        var diff = "10 Minutes";
        //        var unit = data.unit;
        //        var name = data.paramName;
        //        for (var i = 0; i < data.allTimes.length; i++) {
        //            //ddl.push(data.allTimes[i]);
        //            ddl.push('Date - ' + data.allTimes[i])
        //            cbmData.push(data.CBMdata[i]);
        //            maxData.push(data.MaxValue[i]);
        //            minData.push(data.MinValue[i]);
        //            GmaxData.push(data.GMaxVal[i]);
        //            GminData.push(data.GMinVal[i]);
        //            YmaxData.push(data.YMaxVal[i]);
        //            YminData.push(data.YMinVal[i]);
        //        };



        //        ShowName(ddl, cbmData,maxData,minData,GmaxData,GminData,YmaxData,YminData, xAxisLabel, unit, name, diff)
        //    }
        //});

    }

    function ShowCBMAnalyticsData(ddl, cbmData, maxData, minData, name,CBMID,unit) {
        var chart = $('#cbmData_' + CBMID).highcharts({
            chart: {
                zoomType: 'x',
                exportChart: {
                    type: 'application/pdf',
                    filename: 'my-pdf'
                }
            },
            title: {
               // text: name,
                style: {
                    class: 'HighTitle'
                }
            },
            credits: {
                enabled: false
            },
            xAxis: {
                title: {
                    text: 'Time',
                    style: {
                       // fontWeight: 'bold'
                    }
                },
                dataLabels: {
                    //rotation: -45,
                    rotation: -30,
                    //allowOverlap:true,
                    enabled: true,

                },
                categories: ddl,
                labels:
                {
                    rotation: -90,
                    formatter: function () {

                        var item = this.value;
                        var ddlitem = item.split(" ");
                        var finalitem = ddlitem[3];
                        //var finalitem = "";
                        return finalitem;
                    }
                },
                //
                crosshair: true
            },
            yAxis: {
                title: {
                    text: 'Value',
                    style: {
                        //fontWeight: 'bold'
                    }
                },
            },
            tooltip: {
                valueSuffix: unit
            },
            series: [{

                data: cbmData,
                name: name,
                fontWeight: 'normal'
                //color: 'greenyellow',
            }, {
                //type: 'dotted',
                    data: maxData,
                name: "Dynamic Max Limit",
                    color: 'rgba(212,34,16, 1)',
                    fontWeight: 'normal'
            },
            {
                //  type: 'Scatter',
                data: minData,
                name: "Dynamic Min Limit",
                color: 'orange',
                fontWeight: 'normal'
            },

            ],
            exporting: {
                enabled: true
            }
        });
    }

    function ShowAnalytics(ddl, cbmData, maxData, minData, name) {
        var chart = $('#CBMAnalytics').highcharts({
            chart: {
                zoomType: 'x',
                exportChart: {
                    type: 'application/pdf',
                    filename: 'my-pdf'
                }
            },
            title: {
                text: name,
                style: {
                    class: 'HighTitle'
                }
            },
            credits: {
                enabled: false
            },
            xAxis: {
                title: {
                    text: 'Time',
                    style: {
                        fontWeight: 'bold'
                    }
                },
                dataLabels: {
                    //rotation: -45,
                    rotation: -30,
                    //allowOverlap:true,
                    enabled: true,

                },
                categories: ddl,
                labels:
                {
                    rotation: -90,
                    formatter: function () {

                        var item = this.value;
                        var ddlitem = item.split(" ");
                        var finalitem = ddlitem[3];
                        //var finalitem = "";
                        return finalitem;
                    }
                },
                //
                crosshair: true
            },
            yAxis: {
                title: {
                    text: 'Value',
                    style: {
                        fontWeight: 'bold'
                    }
                },
            },
            tooltip: {
                //valueSuffix: unit
            },
            series: [{

                data: cbmData,
                name: name,
                color: 'blue',
                fontWeight: 'normal'
            }, {
                //type: 'dotted',
                data: maxData,
                name: "Dynamic Max Limit",
                    color: 'red',
                    fontWeight: 'normal'
            },
            {
                //  type: 'Scatter',
                data: minData,
                name: "Dynamic Min Limit",
                color: 'orange',
                fontWeight: 'normal'
            },

            ],
            exporting: {
                enabled: true
            }
        });
    }

    function ShowName(ddl, cbmData, maxData, minData, GmaxData, GminData, YmaxData, YminData, xAxisLabel, unit, name, diff) {

        var chart = $('#ccCharat').highcharts({
            chart: {
                zoomType: 'x',
                exportChart: {
                    type: 'application/pdf',
                    filename: 'my-pdf'
                }
            },
            title: {
                text: name,
                style: {
                    class:'HighTitle'
                }
            },
            credits: {
                enabled: false
            },
            xAxis: {
                title: {
                    text: xAxisLabel,
                    style: {
                        fontWeight: 'bold'
                    }
                },
                dataLabels: {
                    //rotation: -45,
                    rotation: -30,
                    //allowOverlap:true,
                    enabled: true,

                },
                categories: ddl,
                labels:
                {
                    rotation: -90,
                              formatter: function () {

                                  var item = this.value;
                                  var ddlitem = item.split(" ");
                                  var finalitem = ddlitem[3];
                                  //var finalitem = "";
                                  return finalitem;
                              }
                          },
                //
                crosshair: true
            },
            yAxis: {
                title: {
                    text: unit,
                    style: {
                        fontWeight: 'bold'
                    }
                },
            },
            tooltip: {
                valueSuffix: unit
            },
            series: [{

                data: cbmData,
                name: name,

                   // color: 'Green'

            }, {
                //type: 'dotted',
                data: maxData,
                name: "Max Limit",

                    color: 'Red',
                    visible:false

            },
            {
              //  type: 'Scatter',
                data: minData,
                name: "Min Limit",

                color: 'Red',
                visible: false
            },
            {
                data: GmaxData,
                name: "Operating Range Max",

                color: 'Green'

            },
            {
                data: GminData,
                name: "Operating Range Min",

                color: 'Green'

            },
            {
                data: YmaxData,
                name: "Upper Warning Limit",

                color: 'Yellow',
                visible: false
            },
            {
                data: YminData,
                name: "Lower Warning Limit",

                color: 'Yellow',
                visible: false
            },
            ],
            exporting: {
                enabled: true
            }
        });

    }

    function ShowSolidGuage(Comp, Id, minVal, maxVal, cbmUOM, paramCategory) {

        var gaugeOptions = {

            chart: {
                type: 'solidgauge',
                margin: [0, 0, 0, 0],
                backgroundColor: '#297fb8',
                //backgroundColor: '#009CE8',
                height: '226'
            },
            exporting: false,
            title: null,
            yAxis: {
                min: minVal,
                max: maxVal,
                //minColor: 'White',
                //maxColor: 'White',
                lineWidth: 0,
                tickWidth: 0,
                minorTickLength: 0,
                minTickInterval: 500,
                labels: {
                    enabled: false
                }
            },
            pane: {
                size: '100%',
                center: ['50%', '60%'],
                startAngle: -130,
                endAngle: 130,
                background: {
                    borderWidth: 20,
                    //backgroundColor: '#DBDBDB',
                    backgroundColor: '#009CE8',
                    shape: 'arc',
                    borderColor: '#2673a7',
                    outerRadius: '90%',
                    innerRadius: '90%',
                },

            },
            tooltip: {
                enabled: false
            },
            plotOptions: {
                solidgauge: {
                    borderColor: 'White',
                    borderWidth: 20,
                    radius: 90,
                    innerRadius: '90%',
                    dataLabels: {
                        y: 5,
                        borderWidth: 0,
                        useHTML: true
                    }
                }
            },
            series: [{
                name: 'windSpeed',
                data: [5],
                dataLabels: {
                    style: {
                        top: '90px',
                        fontFamily: 'Open Sans, Arial',

                        position: 'absolute',


                        left: '5px',
                        top: '37px'
                    },
                    //format: '<div style="text-align:center"><span class="high" style="font-size:30px;color:White;font-weight: 200;text-overflow: Ellipsis; postion:fixed !important; margin-left:-66px" >{y}</span><span style="font-size:20px;color:#acd2ea"> Liters</span></div><div style="text-align:center"><span style="font-size:16px;color:#dceaf3; margin-left:-41px">Paint</span></div>'
                    format: '<div style="text-align:center"><span style="font-size:30px;color:White;font-weight: 200;text-overflow: Ellipsis;" >{y}</span><span style="font-size:20px;color:#acd2ea">' + " "+ cbmUOM + '</span></div><div style="text-align:center"><span style="font-size:16px;color:#dceaf3"></span></div>'
                }

            }],

            credits: {
                enabled: false
            },
        };

        // The speed gauge
        $('#cbm_' + Id).highcharts(gaugeOptions);

        // Tweak SVG
        var svg;
        svg = document.getElementsByTagName('svg');
        if (svg.length > 0) {
            var path = svg[0].getElementsByTagName('path');
            if (path.length > 1) {
                // First path is gauge background
                path[0].setAttributeNS(null, 'stroke-linejoin', 'round');
                // Second path is gauge value
                path[1].setAttributeNS(null, 'stroke-linejoin', 'round');
            }
        }

        // Bring life to the dials

        // Speed
        var chart = $('#cbm_' + Id).highcharts(),
            point,
            newVal;

        if (chart) {
            point = chart.series[0].points[0];

            point.update(Comp);
        }



    }



    function ShowCellGraph3(cbmData, paraname, y, GroupID) {

        var chart = $("#container_" + GroupID).highcharts();

        const axisId = y
        chart.hideLoading();
        //let i = -1;
        //i=+1
        $("#loading__" + GroupID).hide();

        chart.addAxis({


            id: axisId,
            title: {
                text: paraname,
            },
            dataLabels: {
                enabled: false
            },
        }, false)
            chart.addSeries(
                {

                    plotOptions: {
                        connectNulls: true
                    },
                    name: paraname,
                    connectNulls: true,
                    type: 'spline',
                    yAxis: axisId,
                    dataLabels: {
                        enabled: false
                    },


                    data: cbmData,




                })

    }
    function ShowName3(ddl, titleName, name1, name2, name3, GroupID) {
        debugger;
        //$("#loading").hide();
        $("#loading__" + GroupID).css("display", "none");
        $("#loading__" + GroupID).hide();
        $("#container_" + GroupID).highcharts({
            chart: {
                zoomType: 'xy',



                events: {

                    addSeries: function () {

                    },
                    addAxis: function () {

                    }
                }
            },
            title: {
                text: 'Actual',

            },
            credits: {
                enabled: false
            },
            xAxis: [{
                categories: ddl,
                labels: {
                    rotation: -90,
                    //style: {
                    //    fontSize: 'px',
                    //    fontFamily: 'Verdana, sans-serif'
                    //}
                },
                crosshair: true

            }],

            //    yAxis: [
            //{ // Primary yAxis
            //    labels: {
            //        format: '{value}',
            //        style: {
            //            color: '#339CFF',
            //        }

            //    },
            //    title: {
            //        text:name1,
            //        style: {
            //            color: '#339CFF',
            //        }
            //    },



            //},
            //{ // Secondary yAxis
            //    title: {
            //        text:name2,
            //        style: {
            //            color: 'black',
            //        }
            //    },
            //    labels: {
            //        format: '{value}',
            //        style: {
            //            color: 'black',
            //        }
            //    },


            //},
            //{ // Tertiary yAxis
            //    gridLineWidth: 0,
            //    title: {
            //        text:name3,
            //        style: {
            //            color: 'Green',
            //        }
            //    },
            //    labels: {
            //        format: '{value} ',
            //        style: {
            //            color: 'Green',
            //        }
            //    },

            //    // opposite: true
            //},

            //    ],

        });

    }
    function ShowCellGraph1(cbmData, paraname, y, GroupID) {

        var chart = $("#container1_" + GroupID).highcharts();

        chart.hideLoading();
        $("#loading__" + GroupID).hide();
        chart.addSeries(
            {

                plotOptions: {
                    connectNulls: true
                },
                name: paraname,
                connectNulls: true,
                type: 'spline',
                yAxis: y,
                dataLabels: {
                    enabled: false
                },


                data: cbmData,




            })

    }
    function ShowName1(ddl, titleName, name1, name2, name3, GroupID) {
        debugger;
        //$("#loading").hide();
        $("#loading__" + GroupID).css("display", "none");
        $("#loading__" + GroupID).hide();
        $("#container1_" + GroupID).highcharts({
            chart: {
                zoomType: 'xy',



                events: {

                    addSeries: function () {



                        //yAxis: {
                        //    //text: yname,
                        //    format: yname
                        //}
                        //yAxis: yname
                        //var label = this.renderer.label('Feederwise Chart', 100, 120)
                        //    .attr({
                        //        fill: Highcharts.getOptions().colors[0],
                        //        //padding: 10,
                        //        //r: 5,
                        //        //zIndex: 8

                        //    })

                        //    .css({
                        //        color: '#FFFFFF'
                        //    })

                        //    .add();

                        //setTimeout(function () {
                        //    label.fadeOut();
                        //}, 1000);
                    }
                }
            },
            title: {
                text: 'Predicted',

            },
            credits: {
                enabled: false
            },
            xAxis: [{
                categories: ddl,
                labels: {
                    rotation: -90,
                    //style: {
                    //    fontSize: 'px',
                    //    fontFamily: 'Verdana, sans-serif'
                    //}
                },
                crosshair: true

            }],

            yAxis: [
                { // Primary yAxis
                    labels: {
                        format: '{value}',
                        style: {
                            color: '#339CFF',
                        }

                    },
                    title: {
                        text: name1,
                        style: {
                            color: '#339CFF',
                        }
                    },



                },
                { // Secondary yAxis
                    title: {
                        text: name2,
                        style: {
                            color: 'black',
                        }
                    },
                    labels: {
                        format: '{value}',
                        style: {
                            color: 'black',
                        }
                    },


                },
                { // Tertiary yAxis
                    gridLineWidth: 0,
                    title: {
                        text: name3,
                        style: {
                            color: 'Green',
                        }
                    },
                    labels: {
                        format: '{value} ',
                        style: {
                            color: 'Green',
                        }
                    },

                    // opposite: true
                },

            ],

            //series: [{
            //    //data: [129.9, 171.5, 106.4, 19.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 195.6, 4.4]
            //}]
        });
        //var chart = $('#container').highcharts();
        //chart.addSeries({
        //    yAxis:yname,
        //     //data:yname
        //})
    }
    function ShowCellGraph2(cbmData, paraname, y, GroupID) {

        var chart = $("#container2_" + GroupID).highcharts();

        chart.hideLoading();
        $("#loading__" + GroupID).hide();
        chart.addSeries(
            {

                plotOptions: {
                    connectNulls: true
                },
                name: paraname,
                connectNulls: true,
                type: 'spline',
                yAxis: y,
                dataLabels: {
                    enabled: false
                },


                data: cbmData,




            })

    }
    function ShowName2(ddl, titleName, name1, name2, name3, GroupID) {
        debugger;
        //$("#loading").hide();
        $("#loading__" + GroupID).css("display", "none");
        $("#loading__" + GroupID).hide();
        $("#container2_" + GroupID).highcharts({
            chart: {
                zoomType: 'xy',



                events: {

                    addSeries: function () {



                        //yAxis: {
                        //    //text: yname,
                        //    format: yname
                        //}
                        //yAxis: yname
                        //var label = this.renderer.label('Feederwise Chart', 100, 120)
                        //    .attr({
                        //        fill: Highcharts.getOptions().colors[0],
                        //        //padding: 10,
                        //        //r: 5,
                        //        //zIndex: 8

                        //    })

                        //    .css({
                        //        color: '#FFFFFF'
                        //    })

                        //    .add();

                        //setTimeout(function () {
                        //    label.fadeOut();
                        //}, 1000);
                    }
                }
            },
            title: {
                text: titleName,

            },
            credits: {
                enabled: false
            },
            xAxis: [{
                categories: ddl,
                labels: {
                    rotation: -90,
                    //style: {
                    //    fontSize: 'px',
                    //    fontFamily: 'Verdana, sans-serif'
                    //}
                },
                crosshair: true

            }],

            yAxis: [
                { // Primary yAxis
                    labels: {
                        format: '{value}',
                        style: {
                            color: '#339CFF',
                        }

                    },
                    title: {
                        text: name1,
                        style: {
                            color: '#339CFF',
                        }
                    },



                },
                { // Secondary yAxis
                    title: {
                        text: name2,
                        style: {
                            color: 'black',
                        }
                    },
                    labels: {
                        format: '{value}',
                        style: {
                            color: 'black',
                        }
                    },


                },
                { // Tertiary yAxis
                    gridLineWidth: 0,
                    title: {
                        text: name3,
                        style: {
                            color: 'Green',
                        }
                    },
                    labels: {
                        format: '{value} ',
                        style: {
                            color: 'Green',
                        }
                    },

                    // opposite: true
                },

            ],

            //series: [{
            //    //data: [129.9, 171.5, 106.4, 19.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 195.6, 4.4]
            //}]
        });
        //var chart = $('#container').highcharts();
        //chart.addSeries({
        //    yAxis:yname,
        //     //data:yname
        //})
    }

    function ShowmaxGraph(cbmData, paraname, y, GroupID) {

        var chart = $("#container_" + GroupID).highcharts();
        const axisId = y
        chart.hideLoading();
        $("#loading__" + GroupID).hide();
        chart.addSeries(
            {

                plotOptions: {
                    connectNulls: true
                },
                name: paraname + " MAX",
                connectNulls: true,
                type: 'spline',
                yAxis: axisId,
                dataLabels: {
                    enabled: false
                },


                data: cbmData,




            })

    }
    function ShowminGraph(cbmData, paraname, y, GroupID) {

        var chart = $("#container_" + GroupID).highcharts();
        const axisId = y
        chart.hideLoading();
        $("#loading__" + GroupID).hide();
        chart.addSeries(
            {

                plotOptions: {
                    connectNulls: true
                },
                name: paraname + " MIN",
                connectNulls: true,
                type: 'spline',
                yAxis: axisId,
                dataLabels: {
                    enabled: false
                },


                data: cbmData,




            })

    }

    function GetReport() {
        var GroupID = 1;
        ShowReport(GroupID);
    }

    function ShowReport(GroupID)
    {
        debugger;
        $("#container_" + GroupID).html();
        $("#container_" + GroupID).empty();
        debugger;
        $("#container1_" + GroupID).html();
        $("#container1_" + GroupID).empty();

        $("#container2_" + GroupID).html();
        $("#container2_" + GroupID).empty();

        var $activeTab = $('li.active');
        var activeId = GroupID;
        var fromDate = $("#fromdateprediction").val();
        var ToDate = $("#todateprediction").val();

        var machineID = $('.nav-tabs li.active a.machine-tab').data('machineid');
        //var Machine = $("#Machine_ID").val();

        $("#loading__" + GroupID).show();
        //var
        ////$('#ccCharat').remove();
        //var xAxisLabel = 'Time';
        $("#CBMDashboardDetails").html("<img class=loading-img1 height='150px' style='position=Absolute' src='@(Url.Content("/Content/images/gears.GIF"))'/>");
        $.ajax({
            url: "/CBMDashboard/GroupData",
            data: "{ 'machineid': '" + machineID + "', 'toDate': '" + ToDate + "', 'fromDate': '" + fromDate + "', 'GroupId': '" + activeId + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                debugger;
                if (data != "")
                    $("#CBMDashboardDetails").html(data);
                ddl = new Array();
                ddl1 = new Array();
                ddl2 = new Array();
                // cbmData = new Array();


                var unit = new Array();
                var yname = new Array();
                var name1,name2, name3;

                var diff = new Array();
                for (var i = 0; i < data.units.length; i++) {
                    unit.push(data.units[i]);
                }
                for (var i = 0; i < data.paramNames.length; i++) {
                    yname.push(data.paramNames[i]);
                    if(i == 0)
                    {
                        name1 = data.paramNames[i];
                    }
                    else if(i == 1)
                    {
                        name2 = data.paramNames[i];
                    }
                    else
                    {
                        name3 = data.paramNames[i];
                    }
                }
                for (var i = 0; i < data.datediff.length; i++) {
                    diff.push(data.datediff[i]);
                }

                for (var i = 0; i < data.allTimes.length; i++) {
                    //ddl.push(data.allTimes[i]);
                    ddl.push(data.allTimes[i]);
                    //cbmData.push(data.CBMdatas[i]);
                }
                for (var i = 0; i < data.allTimes1.length; i++) {
                    //ddl.push(data.allTimes[i]);
                    ddl1.push(data.allTimes1[i]);
                    //cbmData.push(data.CBMdatas[i]);
                }
                for (var i = 0; i < data.allTimes2.length; i++) {
                    //ddl.push(data.allTimes[i]);
                    ddl2.push(data.allTimes2[i]);
                    //cbmData.push(data.CBMdatas[i]);
                }
                debugger;
                //for (var j = 0 ; j < data.CBMdatas.length; j++) {
                //    for (var i = 0; i < data.CBMdatas[j].length; i++) {
                //        cbmData.push(data.CBMdata[j][i]);
                //    }
                //}
                //ShowName(ddl, cbmData, unit, name, diff)
                var titleName = "Future Prediction ";

                var YAxistext = "";
                ShowName3(ddl, titleName, name1, name2, name3, GroupID);
                ShowName1(ddl1, titleName, name1, name2, name3, GroupID);
                ShowName2(ddl2, titleName, name1, name2, name3, GroupID);
                for (var j = 0 ; j < data.CBMdatas.length; j++) {
                    debugger;
                    cbmData = new Array();
                    var paraname = data.paramNames[j];
                    var y =j+1;
                    paraname = data.paramNames[j];
                    for (var i = 0; i < data.CBMdatas[j].length; i++) {
                        cbmData.push(data.CBMdatas[j][i]);

                    }
                    ShowCellGraph3(cbmData, paraname, y, GroupID);
                    //ShowCellGraph1(cbmData, paraname, y, GroupID);

                }
                for (var j = 0; j < data.CBMdatas1.length; j++) {
                    debugger;
                    cbmData1 = new Array();
                    var paraname = data.paramNames[j];
                    var y = j;
                    paraname = data.paramNames[j];
                    for (var i = 0; i < data.CBMdatas1[j].length; i++) {
                        cbmData1.push(data.CBMdatas1[j][i]);

                    }
                    //ShowCellGraph(cbmData, paraname, y, GroupID);
                    ShowCellGraph1(cbmData1, paraname, y, GroupID);

                }
                for (var j = 0; j < data.CBMdatas2.length; j++) {
                    debugger;
                    cbmData2 = new Array();
                    var paraname = data.paramNames[j];
                    var y = j;
                    paraname = data.paramNames[j];
                    for (var i = 0; i < data.CBMdatas2[j].length; i++) {
                        cbmData2.push(data.CBMdatas2[j][i]);

                    }
                    //ShowCellGraph(cbmData, paraname, y, GroupID);
                    ShowCellGraph2(cbmData2, paraname, y, GroupID);

                }

                for (var j = 0; j < data.CBMdatasMax.length; j++) {
                    debugger;
                    cbmDatamax = new Array();
                    var paraname = data.paramNames[j];
                    var y = j+1;
                    paraname = data.paramNames[j];
                    for (var i = 0; i < data.CBMdatasMax[j].length; i++) {
                        cbmDatamax.push(data.CBMdatasMax[j][i]);

                    }
                    //ShowCellGraph(cbmData, paraname, y, GroupID);
                    ShowmaxGraph(cbmDatamax, paraname, y, GroupID);

                }
                for (var j = 0; j < data.CBMdatasMin.length; j++) {
                    debugger;
                    cbmDatamin = new Array();
                    var paraname = data.paramNames[j];
                    var y = j+1;
                    paraname = data.paramNames[j];
                    for (var i = 0; i < data.CBMdatasMin[j].length; i++) {
                        cbmDatamin.push(data.CBMdatasMin[j][i]);

                    }
                    //ShowCellGraph(cbmData, paraname, y, GroupID);
                    ShowminGraph(cbmDatamin, paraname, y, GroupID);

                }
            }
        });
    }













</script>

<style type="text/css">
    .notification {
        -webkit-background-size: 40px 40px;
        -moz-background-size: 40px 40px;
        background-size: 40px 40px;
        background-image: -webkit-gradient(linear, left top, right bottom, color-stop(.25, rgba(255, 255, 255, .05)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255, 255, 255, .05)), color-stop(.75, rgba(255, 255, 255, .05)), color-stop(.75, transparent), to(transparent));
        background-image: -webkit-linear-gradient(135deg, rgba(255, 255, 255, .05) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .05) 50%, rgba(255, 255, 255, .05) 75%, transparent 75%, transparent);
        background-image: -moz-linear-gradient(135deg, rgba(255, 255, 255, .05) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .05) 50%, rgba(255, 255, 255, .05) 75%, transparent 75%, transparent);
        background-image: -ms-linear-gradient(135deg, rgba(255, 255, 255, .05) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .05) 50%, rgba(255, 255, 255, .05) 75%, transparent 75%, transparent);
        background-image: -o-linear-gradient(135deg, rgba(255, 255, 255, .05) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .05) 50%, rgba(255, 255, 255, .05) 75%, transparent 75%, transparent);
        background-image: linear-gradient(135deg, rgba(255, 255, 255, .05) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .05) 50%, rgba(255, 255, 255, .05) 75%, transparent 75%, transparent);
        -moz-box-shadow: inset 0 -1px 0 rgba(255,255,255,.4);
        -webkit-box-shadow: inset 0 -1px 0 rgba(255,255,255,.4);
        box-shadow: inset 0 -1px 0 rgba(255,255,255,.4);
        width: 100%;
        min-height: 50px;
        border: 1px solid;
        color: #fff;
        padding: 15px;
        position: fixed;
        _position: absolute;
        text-shadow: 0 1px 0 rgba(0,0,0,.5);
        -webkit-animation: animate-bg 5s linear infinite;
        -moz-animation: animate-bg 5s linear infinite;
        font-family: 'Segoe UI', 'Lucida Grande',Verdana,Arial,Helvetica,sans-serif;
        z-index: 10;
    }

    .info {
        background-color: #4ea5cd;
        border-color: #3b8eb5;
    }

    .error {
        background-color: #de4343;
        border-color: #c43d3d;
    }

    .warning {
        background-color: #eaaf51;
        border-color: #d99a36;
    }

    .success {
        background-color: #61b832;
        border-color: #55a12c;
    }

    .notification h3 {
        margin: 0 0 5px 0;
        clear: left;
        float: left;
        color: #000000;
        display: inline;
        font-family: 'Segoe UI Light', 'Segoe UI', 'Lucida Grande',Verdana,Arial,Helvetica,sans-serif;
        font-weight: bold;
    }

    .notification p {
        margin: 0;
        font-size: 1.2em;
    }

    .notification div.message {
        clear: left;
        float: left;
        display: inline;
        margin: 0;
        font-size: 1.5em;
        font-family: inherit;
    }

    .notification div.close {
        float: right;
        display: inline;
        padding: 4px 30px 6px 30px;
        margin: 0 45px 0 0;
        border: 1px solid #fff;
        font-size: 1.3em;
        cursor: pointer;
    }

    .notification ul {
        clear: left;
        float: left;
        font-size: 14px;
    }

    .info div.close:hover {
        background-color: #6CC3EB;
    }

    .error div.close:hover {
        background-color: #FC6161;
    }

    .warning div.close:hover {
        background-color: #FFCD6F;
    }

    .success div.close:hover {
        background-color: #7FD650;
    }
</style>