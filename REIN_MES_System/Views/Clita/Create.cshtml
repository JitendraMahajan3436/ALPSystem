@model REIN_MES_System.Models.RS_MT_Clita

@{
                /**/

                ViewBag.Title = "Create";
                Layout = "~/Views/Shared/admin/_Layout.cshtml";
}

<div class="col-md-12">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Shop_ID, "Shop Name", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownListFor(model => model.Shop_ID, (IEnumerable<SelectListItem>)ViewBag.Shop_ID, "--Select Shop--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Shop_ID, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Machine_ID, "Machine Name", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownListFor(model => model.Machine_ID, (IEnumerable<SelectListItem>)ViewBag.Machine_ID, "--Select Machine--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Machine_ID, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Clita_Item, "CLITA Item", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.TextBoxFor(model => model.Clita_Item, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Clita_Item, null, new { @class = "validation_error" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Clita_Classification, "Classification", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownListFor(model => model.Clita_Classification, (IEnumerable<SelectListItem>)ViewBag.Clita_Classification_ID, "--Select Classification--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Clita_Classification, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Clita_Standard, "Standards", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownListFor(model => model.Clita_Standard, (IEnumerable<SelectListItem>)ViewBag.Clita_Standard_ID, "--Select Standard--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Clita_Standard, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Clita_Tools, "CLITA Tool", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownList("Clita_Tools", (IEnumerable<SelectListItem>)ViewBag.Clita_Tool_ID, "--Select CLITA Tool--", htmlAttributes: new { @class = "form-control", multiple = "multiple" })
                @Html.ValidationMessageFor(model => model.Clita_Tools, null, new { @class = "validation_error" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Clita_Method_ID, "Method", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.DropDownListFor(model => model.Clita_Method_ID, (IEnumerable<SelectListItem>)ViewBag.Clita_Method_ID, "--Select Method--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Clita_Method_ID, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Cycle, "Frequency(In Days)", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.TextBoxFor(model => model.Cycle, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Cycle, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Sequence_No, "Sequence No", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.TextBoxFor(model => model.Sequence_No, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Sequence_No, null, new { @class = "validation_error" })
            </div>
        </div>
        <br />
        <div class="row">

            <div class="col-md-4">
                @Html.LabelFor(model => model.Maintenance_Time_TACT, "Expected Time", htmlAttributes: new { @class = "" })<i style="color:red">*</i>
                @Html.TextBoxFor(model => model.Maintenance_Time_TACT, new { @class = "form-control" }) Eg. :00:00:02
                @Html.ValidationMessageFor(model => model.Maintenance_Time_TACT, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Is_Value_Based, "Is Value Based", htmlAttributes: new { @class = "" })
                <div>
                    @Html.DropDownListFor(model => model.Is_Value_Based, new SelectList(new List<object> { new { value = "false", text = "False" }, new { value = "true", text = "True" } }, "value", "text", 2), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Is_Value_Based, null, new { @class = "validation_error" })
                </div>
            </div>
            <div class="col-md-4">
                @Html.CheckBoxFor(model => model.IsActive)
                @Html.LabelFor(model => model.IsActive, "Active", htmlAttributes: new { @class = "" })
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>
            <div class="col-md-4">
                @Html.HiddenFor(model => model.End_Date, DateTime.Now)
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4 valueBase" style="display:none">
                <i style="color:red">*</i>
                @Html.LabelFor(model => model.Upper_Limit, "Upper Limit", htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(model => model.Upper_Limit, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Upper_Limit, null, new { @class = "validation_error" })
            </div>
            <div class="col-md-4 valueBase" style="display:none">
                <i style="color:red">*</i>
                @Html.LabelFor(model => model.Lower_Limit, "Lower Limit", htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(model => model.Lower_Limit, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Lower_Limit, null, new { @class = "validation_error" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Data_Retention_Period, "Data Retention Period (In Months)", htmlAttributes: new { @class = "" })<i style="color:red"></i>
                @Html.TextBoxFor(model => model.Data_Retention_Period, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Data_Retention_Period, null, new { @class = "validation_error" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                <input type="submit" value="Save" class="btn btn-primary" />
                @Html.ActionLink("Show All", "Index", null, htmlAttributes: new { @class = "btn btn-primary" })
            </div>
        </div>

    }
</div>
<div id="dialog" title="Error"></div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/Select2scripts")
    @Scripts.Render("~/fdtheme/tinytoggel_js")
    <script src="~/Content/theme/plugins/jQueryUI/jquery-ui.min.js"></script>
    <link href="~/Content/theme/plugins/jQueryUI/jquery-ui.css" rel="stylesheet" />
    <link href="~/Content/theme/plugins/datepicker/datepicker3.css" rel="stylesheet" />
    <script src="~/Content/theme/plugins/datepicker/bootstrap-datepicker.js"></script>
    <script>
        $(document).ready(function () {
            $('.tiny-toggle').tinyToggle();
            $("#Clita_Tools").select2({
                //tags: true,
                maximumSelectionLength: 4,
                allowClear: true,
                multiple: 'multiple',
                tokenSeparators: [',', ' ']
            });
            $("#Clita_Standard").select2({
                tags: true
            });
            $("#Clita_Classification").select2({
                tags: true
            });

            //$('#mails').keydown(function (e) {
            //    if (e.keyCode == 13) {
            //        var t = $("#mails").select2('val');
            //        valid(t);
            //    }
            //});

            //$("#mails").select2({
            //    allowClear: true,
            //    multiple: 'multiple',
            //    tags: true,
            //    placeholder: 'select an email',
            //    tokenSeparators: [',', ';']

            //});

            //$("#users").select2({
            //    allowClear: true,
            //    placeholder: 'select a user',
            //    multiple: 'multiple'
            //});

            //$("#Start_Date").datepicker({ format: 'yyyy/mm/dd' });

            //$("#End_Date").datepicker({ format: 'yyyy/mm/dd' });

            //$('#Maintenance_Time_TACT').val("00:00:00");

            //$("#Start_Date").on("change", function () {
            //    $("#End_Date").val($("#Start_Date").val());
            //});

            var Is_Value_Based = $("#Is_Value_Based").val();
            if (Is_Value_Based == 'true') {
                $(".valueBase").show("slow");
            } else {
                $(".valueBase").hide("slow");
            }

            $("#Is_Value_Based").change(function () {
                var Is_Value_Based = $(this).val();
                if (Is_Value_Based == 'true') {
                    $(".valueBase").show("slow");
                } else {
                    $(".valueBase").hide("slow");
                }
            });

            $("#Plant_ID").on("change", function () {
                $("#Shop_ID").html("");

                var Plant_ID = $('#Plant_ID').val();
                if (Plant_ID.length > 0) {
                    //  alert(Plant_ID);
                    $.getJSON('/Clita/GetShopByPlantID', { plantid: Plant_ID }, function (data) {
                        // alert(data);
                        if (data.length > 0) {
                            $('#Shop_ID option').remove();
                            $('#Shop_ID').append('<option value=""></option>');
                            for (var i = 0; i < data.length; i++) {
                                $('#Shop_ID').append('<option value="' +
                                    data[i].Shop_ID + '">' + data[i].Shop_Name + '</option>');
                            }
                        }

                    });
                }
            });


            $('#Shop_ID').change(function () {
                var shopId = $("#Shop_ID").val();
                if (shopId) {
                    var url = "/Clita/getMachineList";
                    ajaxpack.getAjaxRequest(url, "shopId=" + $("#Shop_ID").val() + "", showMachineShopID, "json");

                }
                else {
                    clearSelectBox("Machine_ID");
                }
            });
            function showMachineShopID() {
                var myajax = ajaxpack.ajaxobj
                var myfiletype = ajaxpack.filetype
                if (myajax.readyState == 4) {
                    if (myajax.status == 200 || window.location.href.indexOf("http") == -1) {

                        var jsonRes = $.parseJSON(myajax.responseText);
                        SelectOptionHTML(jsonRes, "Machine_ID");
                    }
                }
            }

            function SelectOptionHTML(jsonRes, targetId) {
                var res = "";
                for (var i = 0; i < jsonRes.length; i++) {
                    res += "<option value='" + jsonRes[i].Id + "'>" + jsonRes[i].Value + "</option>";
                }

                res = "<option value=''>" + $("#" + targetId + " option:first").html() + "</option>" + res;
                $("#" + targetId).html(res);
            }

            function clearSelectBox(targetId) {
                var res = "";
                res = "<option value=''>" + $("#" + targetId + " option:first").html() + "</option>";
                $("#" + targetId).html(res);
            }

            $("#Line_ID").on("change", function () {
                $("#Station_ID").html("");
                var Shop_ID = $('#Line_ID').val();
                if (Shop_ID.length > 0) {
                    //alert(Shop_ID);
                    $.getJSON('/Clita/GetStationByLineID', { lineid: Shop_ID }, function (data) {
                        if (data.stations != null) {
                            if (data.stations.length > 0) {
                                $('#Station_ID option').remove();
                                $('#Station_ID').append('<option value=""></option>');
                                for (var i = 0; i < data.stations.length; i++) {
                                    $('#Station_ID').append('<option value="' +
                                        data.stations[i].Station_ID + '">' + data.stations[i].Station_Name + '</option>');
                                }
                            }
                            if (data.machines != null) {
                                if (data.machines.length > 0)

                                    $('#Machine_ID option').remove();
                                $('#Machine_ID').append('<option value=""></option>');
                                for (var i = 0; i < data.machines.length; i++) {
                                    $('#Machine_ID').append('<option value="' +
                                        data.machines[i].Machine_ID + '">' + data.machines[i].Machine_Name + '</option>');
                                }
                            }
                        }

                    });
                }
            });



        });
    </script>
}
@section Styles {
    @Styles.Render("~/Content/Select2styles")
    @Styles.Render("~/fdtheme/tinytoggel_css")
}

