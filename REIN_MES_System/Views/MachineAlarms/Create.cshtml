@model REIN_MES_System.Models.RS_Ctrl_Machine_Alarms
@using REIN_MES_System.App_LocalResources;
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/admin/_Layout.cshtml";
}



<div class="plant_line_configuration">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true)


            <div class="row">
                <div class="col-lg-3" style="display:none;">
                    @Html.LabelFor(model => model.Plant_ID, ResourcePlant.Plant_Label_Plant_Name, new { @class = "" })
                    @Html.DropDownList("Plant_ID", null, ResourcePlant.Plant_Label_Plant_Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Plant_ID)
                </div>

                <div class="col-lg-3">
                    @Html.LabelFor(model => model.Shop_ID, ResourceShop.Shop_Label_Shop_Name, new { @class = "" })
                    @Html.DropDownList("Shop_ID", null, ResourceShop.Shop_Label_Shop_Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Shop_ID)
                </div>

                <div class="col-lg-3">
                    @Html.LabelFor(model => model.Line_ID, ResourceLine.Line_Label_Name, new { @class = "" })
                    @Html.DropDownList("Line_ID", null, ResourceLine.Line_Label_Line_Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Line_ID)
                </div>

                <div class="col-lg-3">
                    @Html.LabelFor(model => model.Station_ID, ResourceStation.Station_Label_Name, new { @class = "" })
                    @Html.DropDownList("Station_ID", null, ResourceStation.Station_Label_Station_Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Station_ID)
                </div>

                <div class="col-lg-3">
                    @Html.LabelFor(model => model.Machine_ID, "Machine_ID", new { @class = "" })
                    @Html.DropDownList("Machine_ID", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Machine_ID)
                </div>
            </div>
            <br /><br />
            <div class="row">
                <div class="col-sm-5">
                    <div class="box box-primary">

                        <div class="box-body">
                            @Html.LabelFor(model => model.Alarm_ID, "Alarm_ID", new { @class = "" })
                            <div class="input-group">
                                <input type="text" class="form-control" id="search_alarms" onkeyup="javascript: searchSelectBox('search_alarms', 'Alarm_ID');">
                                <span class="input-group-addon"><i class="fa fa-search-plus"></i></span>

                            </div><br />
                            <div class="">
                                @Html.DropDownList("Alarm_ID", null, String.Empty, new { multiple = "multiple", @class = "form-control", @style = "min-height: 400px" })
                                @Html.ValidationMessageFor(model => model.Alarm_ID)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-2">

                    <div class="box box-primary">
                        <!-- form start -->
                        <form role="form">
                            <div class="box-body" style="text-align: center;">


                                <br /><br /><br /><br /><br /><br /><br /><br /><br />
                                <div class="btn-group-vertical">
                                    <button class="btn btn-info" type="button" onclick="swapValue('Alarm_ID', 'selectedAlarms', '>');" style="font-size: 20px;font-weight: bold;">></button><br />
                                    <button class="btn btn-info" type="button" onclick="swapValue('selectedAlarms', 'Alarm_ID', '>');" style="font-size: 20px;font-weight: bold;"><</button>
                                </div>
                                <br /><br /><br /><br /><br /><br /><br /><br />
                            </div><!-- /.box-body -->


                        </form>
                    </div>

                </div>

                <div class="col-sm-5">
                    <div class="box box-primary">
                        <div class="box-body">

                            @Html.LabelFor(model => model.selectedAlarms, "Selected Alarms", new { @class = "" })
                            <div class="input-group">
                                <input type="text" class="form-control" id="search_selected_alarms" onkeyup="javascript: searchSelectBox('search_selected_alarms', 'selectedAlarms');">
                                <span class="input-group-addon"><i class="fa fa-search-plus"></i></span>

                            </div><br />
                            @Html.DropDownList("selectedAlarms", null, String.Empty, new { multiple = "multiple", @class = "form-control select_all_items", @style = "min-height: 400px" })
                            @Html.ValidationMessageFor(model => model.selectedAlarms)
                        </div>
                    </div>
                </div>



            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.Status, new { @class = "" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Status)
                        @Html.ValidationMessageFor(model => model.Status)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Inserted_Host, new { @class = "" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Inserted_Host)
                        @Html.ValidationMessageFor(model => model.Inserted_Host)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Inserted_User_ID, "Inserted_User_ID", new { @class = "" })
                    <div class="col-md-10">
                        @Html.DropDownList("Inserted_User_ID", String.Empty)
                        @Html.ValidationMessageFor(model => model.Inserted_User_ID)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Inserted_Date, new { @class = "" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Inserted_Date)
                        @Html.ValidationMessageFor(model => model.Inserted_Date)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Updated_Host, new { @class = "" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Updated_Host)
                        @Html.ValidationMessageFor(model => model.Updated_Host)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Updated_User_ID, "Updated_User_ID", new { @class = "" })
                    <div class="col-md-10">
                        @Html.DropDownList("Updated_User_ID", String.Empty)
                        @Html.ValidationMessageFor(model => model.Updated_User_ID)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Updated_Date, new { @class = "" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Updated_Date)
                        @Html.ValidationMessageFor(model => model.Updated_Date)
                    </div>
                </div>*@

            <div class="">
                <div class="">
                    <input type="submit" value="Create" class="btn btn-primary select_defect" /> @*@Html.ActionLink("Back to List", "Index")*@
                </div>
            </div>
        </div>
    }

    @*<div>
            @Html.ActionLink("Back to List", "Index")
        </div>*@
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/plant_line_configuration")
}

<script type="text/javascript">


    $(document).ready(function (e) {

        $("#Station_ID").change(function (e) {

            var stationId = $(this).val();
            clearSelectBox("Machine_ID");
            if(stationId)
            {
                var url = "/MachineAlarms/getMachineByStationId";
                ajaxpack.getAjaxRequest(url, "stationId=" + stationId + "", showMachineDetails, "json");
            }
        });

        function showMachineDetails()
        {
            var myajax = ajaxpack.ajaxobj
            var myfiletype = ajaxpack.filetype
            if (myajax.readyState == 4) {

                if (myajax.status == 200 || window.location.href.indexOf("http") == -1) { //if request was successful or running script locally

                    var jsonRes = $.parseJSON(myajax.responseText);
                    SelectOptionHTML(jsonRes, "Machine_ID");
                }
            }
        }

        $("#Machine_ID").change(function (e) {

            var machineId = $(this).val();
            clearSelectBox("Alarm_ID");
            clearSelectBox("selectedAlarms");
            var stationId = $("#Station_ID").val();
            if (machineId) {
                var url = "/MachineAlarms/getSelectedAlarms";
                ajaxpack.getAjaxRequest(url, "machineId=" + machineId + "&stationId=" + stationId, showSelectedAlarmsDetails, "json");

                setTimeout(function (e) {
                    var url = "/MachineAlarms/getNotSelectedAlarms";
                    ajaxpack.getAjaxRequest(url, "machineId=" + machineId, showNotSelectedAlarmsDetails, "json");
                }, 2000);
            }
        });

        function showSelectedAlarmsDetails()
        {
            var myajax = ajaxpack.ajaxobj
            var myfiletype = ajaxpack.filetype
            if (myajax.readyState == 4) {

                if (myajax.status == 200 || window.location.href.indexOf("http") == -1) { //if request was successful or running script locally

                    var jsonRes = $.parseJSON(myajax.responseText);
                    SelectOptionHTML(jsonRes, "selectedAlarms");
                }
            }
        }

        function showNotSelectedAlarmsDetails()
        {
            var myajax = ajaxpack.ajaxobj
            var myfiletype = ajaxpack.filetype
            if (myajax.readyState == 4) {

                if (myajax.status == 200 || window.location.href.indexOf("http") == -1) { //if request was successful or running script locally

                    var jsonRes = $.parseJSON(myajax.responseText);
                    SelectOptionHTML(jsonRes, "Alarm_ID");
                }
            }
        }


        function SelectOptionHTML(jsonRes, targetId) {
            //var jsonRes = $.parseJSON(myajax.responseText);        
            var res = "";
            for (var i = 0; i < jsonRes.length; i++) {
                res += "<option value='" + jsonRes[i].Id + "'>" + jsonRes[i].Value + "</option>";
            }

            res = "<option value=''>" + $("#" + targetId + " option:first").html() + "</option>" + res;
            $("#" + targetId).html(res);
        }

        function clearSelectBox(targetId) {
            var res = "";
            res = "<option value=''>" + $("#" + targetId + " option:first").html() + "</option>";
            $("#" + targetId).html(res);
        }


        window.swapValue = function (sourceId, targetId, direction) {
            if (direction == ">") {
                // source to target
                $("#" + sourceId + " :selected").each(function (i, selected) {
                    if ($(selected).val() == "" || $(selected).val() == null) {

                    }
                    else {
                        $("#" + targetId).append($('<option>', {
                            value: $(selected).val(),
                            text: $(selected).text()
                        }));
                        //foo[i] = $(selected).text();

                        // remove item from source
                        $("#" + sourceId + " option[value='" + $(selected).val() + "']").remove();
                    }

                });
            }
            else {
                // target to source
            }
        }

        $(".select_defect").click(function (e) {

            $('#selectedAlarms option').prop('selected', true);


            return true;
        });
    });


    this.searchSelectBox = function (textBoxId, targetId) {
        //alert(targetId);
        if ($("#" + textBoxId).val() == "" || $("#" + textBoxId).val() == null) {
            $("#" + targetId + " option").show();
        }
        else {
            var searchString = $("#" + textBoxId).val().toUpperCase().trim();
            $("#" + targetId + " option").each(function () {
                var inputString = $(this).text().toUpperCase();
                if (inputString.indexOf(searchString) > -1) {
                    $(this).show();
                }
                else {
                    $(this).hide();
                }

            });
        }
    }

</script>